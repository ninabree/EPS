@model List<ExpenseProcessingSystem.ViewModels.BMViewModel>
@using ExpenseProcessingSystem.ConstantData;
@{
    ViewData["Title"] = "BudgetRegistrationModal";
    Layout = "~/Views/Shared/_ModalLayout.cshtml";
}

@using (Html.BeginForm("RegisterNewBudget", "Modal", FormMethod.Post, new { @id = "submitNewBudgetForm" }))
{
    <div style="height:450px;overflow-y: scroll">
        <table class="table tableBudReg table-striped tab-tbl table-hover table-bordered" style="width:100%">
            <thead>
                <tr>
                    <td style="text-align:center" class="p-l-150"><text>Account : </text></td>
                    <td style="text-align:center" class="p-l-150"><text>Account Number : </text></td>
                    <td style="text-align:center" class="p-l-150"><text>G-Base Budget Code : </text></td>
                    <td style="text-align:center"><text>Current Budget : </text></td>
                    <td style="text-align:center"><text>New Budget : </text></td>
                    <td style="text-align:center"><text>Retain budget : </text><input type="checkbox" id="chkAll"></td>
                </tr>
            </thead>
            <tbody>
                @if (Model.Count() != 0)
                {
                    @for (var i = 0; i < Model.Count(); i++)
                    {
                        if (Model[i].BM_GWrite_StatusID != GlobalSystemValues.STATUS_PENDING)
                        {

                            <tr id="budRegId_@i">
                                <td>
                                    @Html.HiddenFor(x => Model[i].BM_Account_ID)
                                    @Html.HiddenFor(x => Model[i].BM_Account_MasterID)
                                    @Html.TextBoxFor(x => Model[i].BM_Acc_Name, new { @class = "input100 txtAccName", @readonly = "readonly", tabindex = -1 })
                                </td>
                                <td style="text-align:center">
                                    @Html.TextBoxFor(x => Model[i].BM_Acc_Num, new { @class = "input100 txtAccNum", style = "text-align:center;", @readonly = "readonly", tabindex = -1 })
                                </td>
                                <td style="text-align:center">
                                    @Html.TextBoxFor(x => Model[i].BM_GBase_Code, new { @class = "input100 txtGbaseCode", style = "text-align:center;", @readonly = "readonly", tabindex = -1 })
                                </td>
                                <td>
                                    @Html.TextBoxFor(x => Model[i].BM_Budget_Current, "{0:#,##0.00#}", new { @class = "input100 txtCurrBudget", style = "text-align:right;", @readonly = "readonly", tabindex = -1 })
                                </td>
                                <td>
                                    @Html.TextBoxFor(x => Model[i].BM_Budget_Amount, "{0:#,##0.00#}", new { @class = "input100 txtNewBudget", @type = "Number", @min = "0", style = "text-align:right;", tabindex = @i + 1 })
                                </td>
                                <td style="text-align:center"><input type="checkbox" id="chk_@i" class="chkRetain"></td>
                            </tr>

                        }
                        else
                        {
                            <tr id="budRegId_@i">
                                <td>
                                    @Html.HiddenFor(x => Model[i].BM_Account_ID)
                                    @Html.HiddenFor(x => Model[i].BM_Account_MasterID)
                                    @Html.TextBoxFor(x => Model[i].BM_Acc_Name, new { @class = "input100 txtAccName", @readonly = "readonly", tabindex = -1, @style = "color:red" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(x => Model[i].BM_Acc_Num, new { @class = "input100 txtAccNum", @readonly = "readonly", tabindex = -1, @style = "text-align:center;color:red" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(x => Model[i].BM_GBase_Code, new { @class = "input100 txtGbaseCode", @readonly = "readonly", tabindex = -1, @style = "text-align:center;color:red" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(x => Model[i].BM_Budget_Current, "{0:#,##0.00#}", new { @class = "input100 txtCurrBudget", style = "text-align:right;color:red", @readonly = "readonly", tabindex = -1 })
                                </td>
                                <td>
                                    @Html.TextBoxFor(x => Model[i].BM_Budget_Amount, "{0:#,##0.00#}", new { @class = "input100 txtNewBudget", @min = "0", @readonly = "readonly", style = "text-align:right;color:red", tabindex = @i + 1 })
                                </td>
                                <td style="text-align:center"><input type="checkbox" id="chk_@i" class="chkRetain" disabled="disabled"></td>
                            </tr>
                        }
                        @Html.HiddenFor(x => Model[i].BM_GWrite_StatusID, new { @id = "gwriteStatusID_" + @i })
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" style="text-align:center">No account record found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="modal fade" id="login" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="vertical-alignment-helper">
                <div class="modal-dialog vertical-align-center">
                    <div class="modal-content w-30">
                        <div class="modal-header">
                            <h4 style="display:inline">Login</h4>
                            <button type="button" class="close" onclick="$('#login').modal('hide');">&times;</button>
                        </div>
                        <div class="modal-body">
                            <table style="margin:5px;">
                                <tr>
                                    <td>Username : </td>
                                    <td>&nbsp;<input type="text" id="userName" name="username" class="input" maxlength="8" /></td>
                                </tr>
                                <tr>
                                    <td>&nbsp;&nbsp;</td>
                                </tr>
                                <tr>
                                    <td>Password : </td>
                                    <td>&nbsp;<input type="password" id="passWord" name="password" class="input" maxlength="10" /></td>
                                </tr>
                            </table>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn float-r" onclick="$('#login').modal('hide');">Close</button>
                            <button class="btn float-r comVar" id="loginSubmit">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        $('#saveBtnEntry').show();
        $('.modal-dialog').css('width', '70%');
        var trsInit = $(".tableBudReg").find("tbody").find("tr");
        if (trsInit.length == 1) {
            $('#saveBtnEntry').attr("disabled", "disabled");
        }
        $('#chkAll').prop("checked", true);
        var trs = $(".tableBudReg").find("tbody").find("tr");
        var currAllStat = $('#chkAll').is(':checked');
        for (var i = 0; i < trs.length; i++) {
            if ($('#gwriteStatusID_' + i).val() != 1) {
                $('#chk_' + i).prop("checked", currAllStat);
                checkedOrNotChange(i, currAllStat);
            }
        }

        $(function () {
            //Change format of New Budget entered value
            $(".table").on("change", "input.txtNewBudget", function (e) {
                var budRegPNode = $(this.parentNode)[0].parentNode;
                var budRegItemNo = budRegPNode.id; //jquery obj
                var txtnewbud = $("#" + budRegItemNo).find('.txtNewBudget');
                txtnewbud.val(round(txtnewbud.val(), 2));
            });

            //Change all check box based on the Check all check box.
            $(".table").on("change", "#chkAll", function (e) {
                var trs = $(".tableBudReg").find("tbody").find("tr");
                var currAllStat = $('#chkAll').is(':checked');
                for (var i = 0; i < trs.length; i++) {
                    if ($('#gwriteStatusID_' + i).val() != 1) {
                        $('#chk_' + i).prop("checked", currAllStat);
                        checkedOrNotChange(i, currAllStat);
                    }
                }
            });

            //Change format of New Budget entered value
            $(".table").on("change", "input.chkRetain", function (e) {
                var budRegPNode = $(this.parentNode)[0].parentNode;
                var budRegItemNo = budRegPNode.id; //jquery obj
                var selectedChk = $("#" + budRegItemNo).find('.chkRetain');
                var currSelectedStat = selectedChk.is(':checked');

                checkedOrNotChange(selectedChk.attr('id').replace('chk_', ''), currSelectedStat);
            });

            $(".modal-footer2").on("click", "#saveBtnEntry", function (e) {
                $('#login').modal('show');
            });
        });

        function checkedOrNotChange(cnt, stat) {
            if (stat) {
                $('#z' + cnt + '__BM_Budget_Amount').attr("type", 'text');
                $('#z' + cnt + '__BM_Budget_Amount').val($('#z' + cnt + '__BM_Budget_Current').val());
                $('#z' + cnt + '__BM_Budget_Amount').attr('readonly', 'true');
            } else {
                $('#z' + cnt + '__BM_Budget_Amount').attr("type", 'Number');
                $('#z' + cnt + '__BM_Budget_Amount').val("0.00");
                $('#z' + cnt + '__BM_Budget_Amount').removeAttr('readonly');
            }
        }

        function round(value, exp) {
            if (typeof exp === 'undefined' || +exp === 0)
                return Math.round(value);

            value = +value;
            exp = +exp;

            if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0))
                return NaN;

            // Shift
            value = value.toString().split('e');
            value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));

            // Shift back
            value = value.toString().split('e');
            return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));
        }

        function addCommas(nStr) {
            nStr += '';
            x = nStr.split('.');
            x1 = x[0];
            x2 = x.length > 1 ? '.' + x[1] : '';
            var rgx = /(\d+)(\d{3})/;
            while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + ',' + '$2');
            }
            return x1 + x2;
        }
    });
</script>