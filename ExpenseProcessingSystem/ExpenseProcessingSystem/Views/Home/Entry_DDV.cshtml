
@{
    ViewData["Title"] = "Entry_DDV";
    var usdId = ViewData["usdCurrID"];
    var usdMId = ViewData["usdCurrMasterID"];
    var usdAbbr = ViewData["usdAbbrev"];
    var phpId = ViewData["phpCurrID"];
    var phpMId = ViewData["phpCurrMasterID"];
    var phpAbbr = ViewData["phpAbbrev"];
    var yenId = ViewData["yenCurrID"];
    var yenMId = ViewData["yenCurrMasterID"];
    var yenAbbr = ViewData["yenAbbrev"];
}
@using ExpenseProcessingSystem.ViewModels.Entry
@model EntryDDVViewModelList
@inject IJsonHelper Json;

<div class="tabContent">
    <input id="_screen" type="hidden" value="ddv" />
    @using (Html.BeginForm("AddNewDDV", "Home", FormMethod.Post, new { @class = "validate-form", @id = "inputForm" }))
    {
        <div id="tbl-lbl" class="flex-sb">
            <div class="dis-inline-block w-20">Date: <p class="dis-inline-block w-70">@Html.EditorFor(m => m.expenseDate, new { htmlAttributes = new { @class = "input w-97", @type = "date", @readonly = "readonly", @id = "entryDate" } })</p> </div>
            <div class="dis-inline-block"><p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseYear, new { @readonly = "true", @class = "input" })</p> - <p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseId, new { @readonly = "true", @class = "input" })</p></div>
            <div class="dis-inline-block float-r"></div>
        </div>
        <div id="tbl-lbl">
            <div class="dis-inline-block"><p>Payee:</p> </div>
            <div class="dis-inline-block">
                @Html.DropDownListFor(m => m.vendor, new SelectList(Model.systemValues.employees, "Value", "Text", Model.systemValues.employees.SelectedValue), new { @id = "vendorName", @class = "voucher-input" })
            </div>
        </div>
        <div class="entry-tbl-cont">
            <table class="table table-bordered table-striped voucher-tbl w-97 ddv-tbl" id="inputTable">
                <colgroup>
                    <col style="width:18%;" />
                    <col style="width:9%;" />
                    <col style="width:3%;" />
                    <col style="width:3%;" />
                    <col style="width:10%" />
                    <col style="width:2%;" />
                    <col style="width:6%;" />
                    <col style="width:2%;" />
                    <col style="width:6%;" />
                    <col style="width:3%;" />
                    <col style="width:7%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                    <col style="width:2%;" />
                </colgroup>
                <thead>
                    <tr>
                        <th rowspan="2">Gbase Remarks</th>
                        <th rowspan="2">Account</th>
                        <th rowspan="2">Inter-Entity</th>
                        <th rowspan="2">FBT</th>
                        <th rowspan="2">Department</th>
                        <th colspan="2" rowspan="2">VAT</th>
                        <th colspan="3" rowspan="2">EWT</th>
                        <th rowspan="2">Currency</th>
                        <th>Debit</th>
                        <th colspan="2">Credit</th>
                        <th rowspan="2"></th>
                    </tr>
                    <tr>
                        <th scope="col">Gross Amount</th>
                        <th scope="col">EWT Amount</th>
                        <th scope="col">Cash</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.EntryDDV.Count; i++)
                    {
                        <tr id="item_@i">
                            <td class="p-b-1 p-t-1">
                                <div class="flex-sb">
                                    @Html.TextBoxFor(x => Model.EntryDDV[i].GBaseRemarks, new { @class = "input100 w-80 txtgbaseRemarks voucher-input", @maxlength = "30" })
                                    <div id="remark_@i">
                                        <a href="#" class="gRemarks glyphicon glyphicon-folder-open fs-23 m-r-5"></a>
                                        @for (int y = 0; y < Model.EntryDDV[i].gBaseRemarksDetails.Count(); y++)
                                        {
                                            @Html.HiddenFor(x => Model.EntryDDV[i].gBaseRemarksDetails[y].docType, new { @class = "docType" });
                                            @Html.HiddenFor(x => Model.EntryDDV[i].gBaseRemarksDetails[y].desc, new { @class = "desc" });
                                            @Html.HiddenFor(x => Model.EntryDDV[i].gBaseRemarksDetails[y].invNo, new { @class = "invNo" });
                                            @Html.HiddenFor(x => Model.EntryDDV[i].gBaseRemarksDetails[y].amount, new { @class = "amount" });
                                        }
                                    </div>
                                </div>
                            </td>
                            <td>
                                <select id="@Html.IdFor(x => Model.EntryDDV[i].account)" class="input100 txtAcc voucher-input" name="@Html.NameFor(x => Model.EntryDDV[i].account)">
                                    @foreach (var groepModel in Model.systemValues.acc)
                                    {
                                        if (@groepModel.accId == @Model.EntryDDV[0].account)
                                        {
                                            <option value="@groepModel.accId" class="@groepModel.accCode" selected>@groepModel.accName</option>
                                        }
                                        else
                                        {
                                            <option value="@groepModel.accId" class="@groepModel.accCode">@groepModel.accName</option>
                                        }
                                    }
                                </select>
                            </td>
                            <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntryDDV[i].inter_entity, new { @class = "chkInter" })</td>
                            <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntryDDV[i].fbt)</td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryDDV[i].dept, new SelectList(Model.systemValues.dept.OrderBy(x => x.Text), "Value", "Text", Model.systemValues.dept.SelectedValue), new { @class = "input100 txtDept voucher-input" })
                            </td>
                            <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntryDDV[i].chkVat, new { @class = "chkVat comVar" })</td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryDDV[i].vat, new SelectList(Model.EntryDDV[i].vendVATList, "VAT_ID", "VAT_Rate", Model.EntryDDV[i].vat), new { @class = "input100 txtVat comVar voucher-input", @disabled = "true" })
                            </td>
                            <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntryDDV[i].chkEwt, new { @class = "chkEwt comVar" })</td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryDDV[i].ewt, new SelectList(Model.EntryDDV[i].vendTRList, "TR_ID", "TR_Tax_Rate", Model.EntryDDV[i].ewt), new { @class = "input100 txtEwt comVar voucher-input", @disabled = "true" })
                            </td>
                            <td style="text-align:center"><a class="reqEWTBtn glyphicon glyphicon-list-alt"></a></td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryDDV[i].ccy, new SelectList(Model.systemValues.currency, "Value", "Text", Model.systemValues.currency.SelectedValue), new { @class = "input100 ddv-curr-sel voucher-input txtccy" })
                            </td>
                            <td>@Html.TextBoxFor(x => Model.EntryDDV[i].debitGross, new { @class = "input100 txtGross", @readonly = "readonly" })</td>
                            <td>@Html.TextBoxFor(x => Model.EntryDDV[i].credEwt, new { @class = "input100 txtCredEwt", @readonly = "readonly" })</td>
                            <td>@Html.TextBoxFor(x => Model.EntryDDV[i].credCash, new { @class = "input100 txtCredCash", @readonly = "readonly" })</td>
                            <td id="req_@i">
                                <a class="reqBtn glyphicon glyphicon-list-alt"></a>
                                <div id="interDtls">
                                </div>
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Currency1_ID, new { @class = "txtCurr1AbbrID comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Currency1_ABBR, new { @class = "txtCurr1Abbr comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Currency1_Amount, new { @class = "txtCurr1Amt comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Currency2_ID, new { @class = "txtCurr2AbbrID comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Currency2_ABBR, new { @class = "txtCurr2Abbr comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Currency2_Amount, new { @class = "txtCurr2Amt comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Rate, new { @class = "txtInterRate comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].ewt_Payor_Name_ID, new { @class = "txtPayor comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].ewt_Payor_Name, new { @class = "txtPayorName comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Check1, new { @class = "txtChk1 comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Check2, new { @class = "txtChk2 comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Convert1_Amount, new { @class = "txtConv1 comVar" })
                                @Html.HiddenFor(x => Model.EntryDDV[i].interDetails.Inter_Convert2_Amount, new { @class = "txtConv2 comVar" })
                            </td>
                        </tr>
                    }
                    <tr>
                        <td style="border:none; background-color:#f2f2f2" rowspan="2">
                            <a id="addRow" href="#" class="glyphicon glyphicon-plus"></a>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <a id="removeRow" href="#" class="glyphicon glyphicon-remove expenseTable-remove" style="display:none"></a>
                        </td>

                        <td colspan="10" style="text-align:right; border:none; background-color:#f2f2f2">Subtotal : </td>
                        <td rowspan="2" class="text-v-bottom"><div class="flex-c"><input type="text" class="input100" readonly id="grossTotal" /></div></td>
                        <td><input type="text" readonly class="input100" id="credEwtTotal" /></td>
                        <td><input type="text" readonly class="input100" id="credCashTotal" /></td>
                    </tr>
                    <tr>
                        <td colspan="10" style="text-align:right; border:none; background-color:#f2f2f2 ">Total : </td>
                        <td colspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="credTotal" /></div></td>

                        @Html.HiddenFor(x => x.entryID)
                        @Html.HiddenFor(x => x.payee_type)
                        <input value="DDV" id="expenseType" type="hidden" />
                    </tr>
                </tbody>
            </table>
        </div>
        <div id="voucherPreview" class="border-solid">
            <div id="tbl-lbl">
                <div class="dis-inline-block"><p>Preview of Voucher:</p></div>
            </div>
            <iframe id="iframePreview" frameborder="0" src="" style="position: relative; min-height: 50vh; max-height: 100%; width: 100%;"></iframe>
        </div>
        <div id="entry-controls" class="m-b-10">
            <div class="flex-sb m-t-15">
                <div>
                    <div class="dis-inline-block"><button class="tbl-btn btnEntryAction" name="command" value="Save">Save</button></div>
                </div>
            </div>
        </div>
        <input type="hidden" name="command" id="btnID" />
        <input type="hidden" id="yenID" value="@Model.yenCurrID" />
        <input type="hidden" id="yenAbbrv" value="@Model.yenAbbrev" />
        <input type="hidden" id="yenMasterID" value="@Model.yenCurrMasterID" />
    }

    <div id="modalDiv">
        @Html.Partial("ModalGbase")
    </div>
    @Html.Partial("ModalPartial2")
    <div id="ValidationSummary" style="display: none" class="">
        @Html.ValidationSummary(false, "", new { @id = "validationSummary" })
    </div>
</div>
<script>
    $(window).on("load", function () {
        $('#iframePreview').prop('src', "/Home/VoucherDDV");
    });

    $(document).ready(function () {
        eachTr();
        var myModal2 = $('.myModal2');
        var modalDiv2 = $(myModal2).find('div div');
        var modalDivHeader2 = $(modalDiv2).find('.modal-header2');
        var modalDivBody2 = $(modalDiv2).find('.modal-body2');
        var modalDivFooter2 = $(modalDiv2).find('.modal-footer2');

        //trigger recomputation of DDV voucher onload
        reComputeDDVVoucher();

        function reComputeDDVVoucher() {
            var screen = $("#_screen").val();
            if (screen == "ddv") {
                var myform = document.getElementById("inputForm");
                var data = new FormData(myform);
                $.ajax({
                    type: 'POST',
                    url: "/Home/VoucherDDV",
                    data: $("#inputForm").serialize(),
                    success: function (result) {
                        var doc = document.getElementById("iframePreview").contentWindow.document;
                        doc.open();
                        doc.write(result);
                        doc.close();
                    }
                });
            }
        }
        function eachTr() {
            //Enable VAT/EWT dropdown list if corresponding checkbox is checked
            var trs = $("#inputTable").find("tbody").find("tr");
            for (var cnt = 0; cnt < trs.length - 2; cnt++) {
                ddlEnabled(cnt);
                var currId = $("#item_" + cnt).find("#EntryDDV_" + cnt + "__ccy  option:selected").val() + "";
                currenableVATEWT("item_" + cnt, currId);
            }
            if ((trs.length - 3) > 0) {
                $('.expenseTable-remove').show();
            }
        }
        //checks each checkbox and enables corresponding modals
        CheckEachEWT();
        CheckEachInter();

        $(document).on("click", "#saveBtnEntry", function (e) {
            $(".txtDept").trigger("change");
        });

        $("#addRow").click(function (e) {
            var itemCount = document.getElementById('inputTable').getElementsByTagName('tbody')[0].childElementCount - 2;
            var tableRef = document.getElementById('inputTable').getElementsByTagName('tbody')[0];
            var acc = @Html.Raw(Json.Serialize(Model.systemValues.acc));
            var dept = @Html.Raw(Json.Serialize(Model.systemValues.dept));
            var curr = @Html.Raw(Json.Serialize(Model.systemValues.currency));
            var ewt = @Html.Raw(Json.Serialize(Model.systemValues.ewt));
            var vat = @Html.Raw(Json.Serialize(Model.systemValues.vat));

            // Insert a row in the table at the last row
            var newRow = tableRef.insertRow(itemCount);
            newRow.id = "item_" + itemCount

            var htmlContent = '<td class="p-b-1 p-t-1"><div class="flex-sb">' +
                '<input class="input100 w-80 voucher-input" id="EntryDDV_' + itemCount + '__GBaseRemarks" name="EntryDDV[' + itemCount + '].GBaseRemarks" type="text" value="">' +
                '<div id="remark_' + itemCount + '"><a href="#" class="gRemarks glyphicon glyphicon-folder-open fs-23 m-r-5"></a></div></div></td>' +
                '<td><select class="input100 txtAcc voucher-input" id="EntryDDV_' + itemCount + '__account" name="EntryDDV[' + itemCount + '].account">';

            for (var i = 0; i < acc.length; i++) {
                htmlContent += '<option value="' + acc[i]["accId"] + '" class="' + acc[i]["accCode"] + '">' + acc[i]["accName"] + '</option>';
            }

            htmlContent += '</select></td>' +
                '<td style="text-align:center"><input data-val="true" data-val-required="The inter_entity field is required." class= "chkInter" id="EntryDDV_' + itemCount + '__inter_entity" name="EntryDDV[' + itemCount + '].inter_entity" type="checkbox" value="true"></td>' +
                '<td style="text-align:center"><input data-val="true" data-val-required="The fbt field is required." id="EntryDDV_' + itemCount + '__fbt" name="EntryDDV[' + itemCount + '].fbt" type="checkbox" value="true"></td>' +
                '<td><select class="input100 voucher-input" id="EntryDDV_' + itemCount + '__dept" name="EntryDDV[' + itemCount + '].dept">';
            for (var i = 0; i < dept.length; i++) {
                htmlContent += '<option value="' + dept[i]["value"] + '">' + dept[i]["text"] + '</option>';
            }

            htmlContent += '</select></td>' +
                '<td style="text-align:center"><input class="chkVat comVar voucher-input" data-val="true" data-val-required="The chkVat field is required." id="EntryDDV_' + itemCount + '__chkVat" name="EntryDDV[' + itemCount + '].chkVat" type="checkbox" value="true"></td>' +
                '<td><select class="input100 txtVat comVar voucher-input" data-val="true" data-val-required="The vat field is required." id="EntryDDV_' + itemCount + '__vat" name="EntryDDV[' + itemCount + '].vat" disabled="disabled">';
            for (var i = 0; i < vat.length; i++) {
                htmlContent += '<option value="' + vat[i]["value"] + '">' + vat[i]["text"] + '</option>';
            }
            htmlContent += '</select></td>' +
                '<td style="text-align:center"><input class="chkEwt comVar voucher-input" data-val="true" data-val-required="The chkEwt field is required." id="EntryDDV_' + itemCount + '__chkEwt" name="EntryDDV[' + itemCount + '].chkEwt" type="checkbox" value="true"></td>' +
                '<td><select class="input100 txtEwt comVar voucher-input" data-val="true" data-val-required="The ewt field is required." id="EntryDDV_' + itemCount + '__ewt" name="EntryDDV[' + itemCount + '].ewt" disabled="disabled">';
            for (var i = 0; i < ewt.length; i++) {
                htmlContent += '<option value="' + ewt[i]["value"] + '">' + ewt[i]["text"] + '</option>';
            }
            htmlContent += '</select></td>' +
                '<td style="text-align:center"><a class="reqEWTBtn glyphicon glyphicon-list-alt"></a></td>' +
                '<td><select class="input100 ddv-curr-sel txtccy voucher-input" data-val="true" data-val-required="The ccy field is required." id="EntryDDV_' + itemCount + '__ccy" name="EntryDDV[' + itemCount + '].ccy">';
            for (var i = 0; i < curr.length; i++) {
                htmlContent += '<option value="' + curr[i]["value"] + '">' + curr[i]["text"] + '</option>';
            }
            htmlContent += '</select></td>' +
                '<td><input class="input100 txtGross" readonly="readonly" data-val="true" data-val-number="The field debitGross must be a number." data-val-required="The debitGross field is required." id="EntryDDV_' + itemCount + '__debitGross" name="EntryDDV[' + itemCount + '].debitGross" type="number" min="0" value="0"></td>' +
                '<td><input class="input100  txtCredEwt" data-val="true" data-val-number="The field credEwt must be a number." data-val-required="The credEwt field is required." id="EntryDDV_' + itemCount + '__credEwt" name="EntryDDV[' + itemCount + '].credEwt" type="text" readonly="true" value="0"></td>' +
                '<td><input class="input100 txtCredCash" data-val="true" data-val-number="The field credCash must be a number." data-val-required="The credCash field is required." id="EntryDDV_' + itemCount + '__credCash" name="EntryDDV[' + itemCount + '].credCash" type="text" readonly="true" value="0"></td>' +
                '<td id="req_' + itemCount + '"><a class="reqBtn glyphicon glyphicon-list-alt"></a>'
                + '<div id="interDtls"></div>'
                + '<input class="txtCurr1AbbrID" data-val="true" data-val-required="The Inter_Currency1_ID field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Currency1_ID" name="EntryDDV[' + itemCount + '].interDetails.Inter_Currency1_ID" type="hidden" value="0">'
                + '<input class="txtCurr1Abbr" id="EntryDDV_' + itemCount + '__interDetails_Inter_Currency1_ABBR" name="EntryDDV[' + itemCount + '].interDetails.Inter_Currency1_ABBR" type="hidden" value="">'
                + '<input class="txtCurr1Amt" data-val="true" data-val-number="The field Inter_Currency1_Amount must be a number." data-val-required="The Inter_Currency1_Amount field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Currency1_Amount" name="EntryDDV[' + itemCount + '].interDetails.Inter_Currency1_Amount" type="hidden" value="0">'
                + '<input class="txtCurr2AbbrID" data-val="true" data-val-required="The Inter_Currency2_ID field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Currency2_ID" name="EntryDDV[' + itemCount + '].interDetails.Inter_Currency2_ID" type="hidden" value="0">'
                + '<input class="txtCurr2Abbr" id="EntryDDV_' + itemCount + '__interDetails_Inter_Currency2_ABBR" name="EntryDDV[' + itemCount + '].interDetails.Inter_Currency2_ABBR" type="hidden" value="">'
                + '<input class="txtCurr2Amt" data-val="true" data-val-number="The field Inter_Currency2_Amount must be a number." data-val-required="The Inter_Currency2_Amount field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Currency2_Amount" name="EntryDDV[' + itemCount + '].interDetails.Inter_Currency2_Amount" type="hidden" value="0">'
                + '<input class="txtInterRate" data-val="true" data-val-number="The field Inter_Rate must be a number." data-val-required="The Inter_Rate field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Rate" name="EntryDDV[' + itemCount + '].interDetails.Inter_Rate" type="hidden" value="0">'
                + '<input class="txtPayor" data-val="true" data-val-required="The EWT - Tax Payors Name field is required." id="EntryDDV_' + itemCount + '__ewt_Payor_Name_ID" name="EntryDDV[' + itemCount + '].ewt_Payor_Name_ID" type="hidden" value="0">'
                + '<input class="txtPayorName" id="EntryDDV_' + itemCount + '__ewt_Payor_Name" name="EntryDDV[' + itemCount + '].ewt_Payor_Name" type="hidden" value="">'
                + '<input class="txtChk1" data-val="true" data-val-required="The Inter_Check1 field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Check1" name="EntryDDV[' + itemCount + '].interDetails.Inter_Check1" type="hidden" value="False">'
                + '<input class="txtChk2" data-val="true" data-val-required="The Inter_Check2 field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Check2" name="EntryDDV[' + itemCount + '].interDetails.Inter_Check2" type="hidden" value="False">'
                + '<input class="txtConv1" data-val="true" data-val-number="The field Inter_Convert1_Amount must be a number." data-val-required="The Inter_Convert1_Amount field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Convert1_Amount" name="EntryDDV[' + itemCount + '].interDetails.Inter_Convert1_Amount" type="hidden" value="0">'
                + '<input class="txtConv2" data-val="true" data-val-number="The field Inter_Convert2_Amount must be a number." data-val-required="The Inter_Convert2_Amount field is required." id="EntryDDV_' + itemCount + '__interDetails_Inter_Convert2_Amount" name="EntryDDV[' + itemCount + '].interDetails.Inter_Convert2_Amount" type="hidden" value="0">'
                + '</td>';

            newRow.innerHTML = htmlContent;

            var trCount = $("#inputTable").find("tbody").find("tr");
            if ((trCount.length - 3) > 0) {
                $('.expenseTable-remove').show();
            }
            eachTr();
            $('#item_' + itemCount).find('.txtAcc').trigger('change');

            var ccyList = [];
            for (var i = 0; i < $('.txtccy:not(#template_ccy)').length; i++) {
                ccyList.push($($('.txtccy:not(#template_ccy)')[i]).val());
            }
            if ($('.txtccy:not(#template_ccy)').length > 1 && !(ccyList.every((val, i, arr) => val === arr[0]))) {
                $("#grossTotal").val(0.00);
                $("#credEwtTotal").val(0.00);
                $("#credCashTotal").val(0.00);
                $("#credTotal").val(0.00);
            }
        });
        //Inter Entity
        $("table").on("click", ".expenseInterEntity", function (e) {
            e.stopImmediatePropagation();
            var pNode = $(this.parentNode)[0].parentNode;
            var idNo = pNode.id.substring(5);
            var id = pNode.id;
            //check if Gbase Remarks Title is not null
            var gbaseTitle = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__GBaseRemarks').val();
            if (gbaseTitle.length > 0) {
                var curr1_Abbr_ID = $("#" + pNode.id).find("select[id$='__ccy']  option:selected").val() + "";
                var curr1_Abbr_Name = $("#" + pNode.id).find("select[id$='__ccy']  option:selected").text();
                var curr1_Amt = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Currency1_Amount').val();
                var curr1_Chk = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Check1').val();
                var conv1_Amt = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Convert1_Amount').val();
                var curr2_Abbr_ID = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Currency2_ID').val();
                var curr2_Abbr_Name = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Currency2_ABBR').val();
                var curr2_Amt = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Currency2_Amount').val();
                var curr2_Chk = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Check2').val();
                var conv2_Amt = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Convert2_Amount').val();
                var interRate = $("#" + pNode.id).find('#EntryDDV_' + idNo + '__interDetails_Inter_Rate').val();
                var remarksTitle = $("#" + pNode.id).find("td div #EntryDDV_" + pNode.id.substring(5) + "__GBaseRemarks").val();
                var account = $("#" + pNode.id).find(".txtAcc option:selected").text();
                var accountID = $("#" + pNode.id).find(".txtAcc option:selected").val();

                //remove prev contents
                modalDivBody2.empty();
                modalDivHeader2.find('h4').remove();
                modalDivFooter2.find("#add_row_btn").remove();

                //set modal header title
                modalDivHeader2.append('<h4 class="modal-title">Inter-Entity</h4>');
                //set modal body content
                modalDivBody2.load("@Url.Action("EntryExpenseInterEntity", "Modal")", {
                    "id": id,
                    "interRate": interRate,
                    "account": account,
                    "remarksTitle": remarksTitle,
                    "Curr1AbbrID": curr1_Abbr_ID,
                    "Curr1AbbrName": curr1_Abbr_Name,
                    "Curr1Amt": curr1_Amt,
                    "Curr2AbbrID": curr2_Abbr_ID,
                    "Curr2AbbrName": curr2_Abbr_Name,
                    "Curr2Amt": curr2_Amt,
                    "Chk1": curr1_Chk,
                    "Conv1Amt": conv1_Amt,
                    "Chk2": curr2_Chk,
                    "Conv2Amt": conv2_Amt,
                    "accID": accountID

                }, function (response, status, xhr) {
                    if (status == "error") {
                        alert("Something went wrong.");
                    }
                });

                $(myModal2).modal('show');
            } else {
                $('#alert').text("Kindly input the GBase Remarks Title before entering Inter Entity values.");
                $('#divAlertWindow').show();
            }
        });

        //EWT
        $("table").on("click", ".expenseEWT", function (e) {
            e.stopImmediatePropagation();
            var pNode = $(this.parentNode)[0].parentNode;
            var taxpayor = $("#" + pNode.id).find(".txtPayor").val()

            //remove prev contents
            modalDivBody2.empty();
            modalDivHeader2.find('h4').remove();
            modalDivFooter2.find("#add_row_btn").remove();

            //set modal header title
            modalDivHeader2.append('<h4 class="modal-title">EWT Information</h4>');
            modalDivBody2.load("@Url.Action("EntryExpenseEWT", "Modal")", {
                "id": pNode.id,
                "taxpayor": taxpayor
            }, function (response, status, xhr) {
                if (status == "error") {
                    alert("Something went wrong.");
                }
            });

            $(myModal2).modal('show');
        });

        $("table").on("change", "input.chkInter", function (e) {

            var pNode = String($(this.parentNode)[0].parentNode.id);
            var btnAttr = $("#" + pNode).find("#req_" + pNode.substring(5)).find(".reqBtn");

            if (this.checked == true) {
                btnAttr.attr("href", "#");
                btnAttr.attr("class", "expenseInterEntity reqBtn glyphicon glyphicon-list-alt");
                //disable the gbase remarks for that row
                $("#" + pNode).find("#remark_" + pNode.substring(5)).find("a").removeClass("gRemarks");
                //remove the gbase remarks details for that row
                $("#" + pNode).find("#remark_" + pNode.substring(5)).find("input").each(function () {
                    $(this).remove();
                });
                resetDebitCredit(pNode);
            } else {
                btnAttr.removeAttr("href");
                btnAttr.attr("class", "reqBtn glyphicon glyphicon-list-alt");
                //enable GBase remarks
                $("#" + pNode).find("#remark_" + pNode.substring(5)).find("a").addClass("gRemarks");
                $("#" + pNode).find("#req_" + pNode.substring(5)).find("input[id^='EntryDDV_" + pNode.substring(5) + "__interDetails_']").each(function () {
                    $(this).val();
                });
                resetDebitCredit(pNode);
            }
            interenableVATEWT(pNode, this.checked);
        });

        $("table").on("change", "input.chkEwt", function (e) {

            var pNode = String($(this.parentNode)[0].parentNode.id);
            var btnAttr = $("#" + pNode).find(".reqEWTBtn");

            if (this.checked == true) {
                btnAttr.attr("href", "#");
                btnAttr.addClass("expenseEWT");
            } else {
                btnAttr.removeAttr("href");
                btnAttr.removeClass("expenseEWT");
            }
        });
        $("table").on("change", ".ddv-curr-sel", function (e) {
            var pNode = String($(this.parentNode)[0].parentNode.id);
            currenableVATEWT(pNode, $(this).val());
            computeValuesDDV($(this.parentNode)[0].parentNode);
            if ($("option:selected", this).text() == "@ViewData["yenAbbrev"]") {
                $("#remark_" + pNode.substring(5)).find('input').remove();
                $("#req_" + pNode.substring(5)).find('#interDtls').empty();
                $("#" + pNode + " .txtGross").val(0);
                computeValuesDDV($(this.parentNode)[0].parentNode);
            }
        });
    });
    //--------------------------------------------------------------------------------------------
    // [[ FUNCTIONS ]]

    function interenableVATEWT(pNode, ischecked) {

        var curr1_ID = $("#" + pNode).find("select[id$='__ccy']  option:selected").val() + "";
        if (curr1_ID == "31" && (!ischecked)) {
            //enable VAT and EWT when INTER ENTITY
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").prop('disabled', false);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").prop('disabled', false);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").trigger("change");
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").trigger("change");
        } else {
            //disable VAT and EWT when INTER ENTITY
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").prop('disabled', true);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").prop('disabled', true);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").prop("checked", false);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").prop("checked", false);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").trigger("change");
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").trigger("change");

        }
    }
    function currenableVATEWT(pNode, val) {

        var inter = $("#EntryDDV_" + pNode.substring(5) + "__inter_entity");
        var isInter = $(inter).is(":checked");
        if (val == "31" && (!isInter)) {
            //enable VAT and EWT when INTER ENTITY
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").prop('disabled', false);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").prop('disabled', false);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").trigger("change");
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").trigger("change");
        } else {
            //disable VAT and EWT when INTER ENTITY
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").prop('disabled', true);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").prop('disabled', true);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").prop("checked", false);
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").prop("checked", false);

            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkVat").trigger("change");
            $("#" + pNode).find("#EntryDDV_" + pNode.substring(5) + "__chkEwt").trigger("change");
            computeValuesDDV($("#" + pNode)[0]);
        }
    }
    function updateExpenseEWTDDV(chkEwt) {
        var pNode = String($(chkEwt.parentNode)[0].parentNode.id);
        var btnAttr = $("#" + pNode).find(".reqEWTBtn");
        if (chkEwt.checked == true) {
            btnAttr.attr("href", "#");
            btnAttr.addClass("expenseEWT");
        } else {
            btnAttr.removeAttr("href");
            btnAttr.removeClass("expenseEWT");
        }
    }
    function updateExpenseInterDDV(chkInter) {

        var pNode = String($(chkInter.parentNode)[0].parentNode.id);
        var btnAttr = $("#" + pNode).find("#req_" + pNode.substring(5)).find(".reqBtn");

        if (chkInter.checked == true) {
            btnAttr.attr("href", "#");
            btnAttr.attr("class", "expenseInterEntity reqBtn glyphicon glyphicon-list-alt");
            //disable the gbase remarks for that row
            $("#" + pNode).find("#remark_" + pNode.substring(5)).find("a").removeClass("gRemarks");
            //remove the gbase remarks details for that row
            $("#" + pNode).find("#remark_" + pNode.substring(5)).find("input").each(function () {
                $(chkInter).remove();
            });
            //resetDebitCredit(pNode);
            computeValuesDDV($(chkInter.parentNode)[0].parentNode);
        } else {
            btnAttr.removeAttr("href");
            btnAttr.attr("class", "reqBtn glyphicon glyphicon-list-alt");
            //enable GBase remarks
            $("#" + pNode).find("#remark_" + pNode.substring(5)).find("a").addClass("gRemarks");
            $("#" + pNode).find("#req_" + pNode.substring(5)).find("input[id^='EntryDDV_" + pNode.substring(5) + "__interDetails_']").each(function () {
                $(chkInter).val();
            });
            //resetDebitCredit(pNode);
            computeValuesDDV($(chkInter.parentNode)[0].parentNode);
        }
    }

    function CheckEWTPayor(pNode) {
        var taxpayor = $("#" + pNode.id).find(".txtPayor").val();
        if (taxpayor > 0) {
            //Get EWT and VAT of selected vendor.
            var ddlVAT = $('#' + pNode.id).find('.txtVat');
            var ddlEWT = $('#' + pNode.id).find('.txtEwt');
            $.getJSON('getVendorVatList', { vendorID: taxpayor }, function (data) {
                var sel = ddlVAT.find("option:selected");
                ddlVAT.empty();
                if (data.length == 0) {
                    ddlVAT.append($('<option/>', {
                        value: 0,
                        text: "N/A"
                    }));
                }
                $.each(data, function (index, itemData) {
                    if (itemData["vaT_ID"] == sel.val()) {
                        ddlVAT.append($('<option/>', {
                            value: itemData["vaT_ID"],
                            text: itemData["vaT_Rate"],
                            selected: true
                        }));
                    } else {
                        ddlVAT.append($('<option/>', {
                            value: itemData["vaT_ID"],
                            text: itemData["vaT_Rate"]
                        }));
                    }
                });
                computeValuesDDV(pNode);
            });

            $.getJSON('getVendorTRList', { vendorID: taxpayor }, function (data) {
                var sel = ddlEWT.find("option:selected");
                ddlEWT.empty();
                if (data.length == 0) {
                    ddlEWT.append($('<option/>', {
                        value: 0,
                        text: "N/A"
                    }));
                }
                //ddlEWT.append($(sel));
                $.each(data, function (index, itemData) {
                    if (itemData["tR_ID"] == sel.val()) {
                        ddlEWT.append($('<option/>', {
                            value: itemData["tR_ID"],
                            text: itemData["tR_Tax_Rate"],
                            selected: true
                        }));
                    } else {
                        ddlEWT.append($('<option/>', {
                            value: itemData["tR_ID"],
                            text: itemData["tR_Tax_Rate"]
                        }));
                    }
                });
                computeValuesDDV(pNode);
            });
        }
    }
    function CheckEachEWT() {
        $(".chkEwt").each(function (index, item) {
            updateExpenseEWTDDV(item);

            //checks if ewt payor name is not null, if yes, update tr and vat
            //CheckEWTPayor($(item.parentNode)[0].parentNode);
        });
    }

    function CheckEachInter() {
        $(".chkInter").each(function (index, item) {
            updateExpenseInterDDV(item);
        });
    }
    function resetDebitCredit(itemNo) {
        $("#grossTotal").val(0);
        $("#credEwtTotal").val(0);
        $("#credCashTotal").val(0);
        $("#credTotal").val(Number(0));
        $("#" + itemNo).find(".txtGross").val(0);
        $("#" + itemNo).find(".txtCredEwt").val(0);
        $("#" + itemNo).find(".txtCredCash").val(0);
    }
    function computeValuesDDV(pNode) {
        var grossAmt = 0;
        var isInter = $("#" + pNode.id).find("#EntryDDV_" + pNode.id.substring(5) + "__inter_entity").is(':checked');

        if (!isInter) {
            var amounts = $("#" + pNode.id + " .amount");
            for (var i = 0; i < amounts.length; i++) {
                grossAmt += Number(amounts[i].value);
            }
        } else {
            grossAmt = $("#" + pNode.id + " .txtGross").val();
            var btnAttr = $("#" + pNode.id).find("#req_" + pNode.id.substring(5)).find(".reqBtn");
            btnAttr.attr("href", "#");
            btnAttr.attr("class", "expenseInterEntity reqBtn glyphicon glyphicon-list-alt");
        }

        $("#" + pNode.id + " .txtGross").attr("value", grossAmt);

        var itemNo = pNode.id; //jquery obj
        var chkEwtVal = $("#" + itemNo).find(".chkEwt").is(':checked');
        var vatable = $("#" + itemNo).find(".chkVat").is(':checked');
        if (chkEwtVal) {
            if (vatable) {
                var vatRate = (Number($("#" + itemNo).find(".txtVat option:selected").text()) / 100);
                var ewtRate = (Number($("#" + itemNo).find(".txtEwt option:selected").text()) / 100);
                var netVat = roundNumber(grossAmt / (1 + vatRate), 2);
                var ewt = roundNumber(netVat * ewtRate, 2);
                var netEwt = grossAmt - ewt;

                $("#" + itemNo).find(".txtCredEwt").val(ewt);
                $("#" + itemNo).find(".txtCredCash").val(roundNumber(netEwt,2));
            } else {
                var ewtAmount = grossAmt * (Number($("#" + itemNo).find(".txtEwt option:selected").text()) / 100);
                $("#" + itemNo).find(".txtCredEwt").val(roundNumber(ewtAmount, 2));
                $("#" + itemNo).find(".txtCredCash").val(roundNumber((grossAmt - ewtAmount), 2));
            }
        } else {
            $("#" + itemNo).find(".txtCredEwt").val(0);
            $("#" + itemNo).find(".txtCredCash").val(roundNumber(grossAmt,2));
        }

        var gross = $(".txtGross");
        var credEwt = $(".txtCredEwt");
        var credCash = $(".txtCredCash");

        var grossTotal = 0;
        var ewtSubTotal = 0;
        var cashSubTotal = 0;

        for (var i = 0; i < gross.length; i++) {
            grossTotal += Number(gross[i].value);
        }

        for (var i = 0; i < credEwt.length; i++) {
            ewtSubTotal += Number(credEwt[i].value);
        }

        for (var i = 0; i < credCash.length; i++) {
            cashSubTotal += Number(credCash[i].value);
        }

        $("#grossTotal").val(roundNumber(grossTotal, 2));
        $("#credEwtTotal").val(roundNumber(ewtSubTotal, 2));
        $("#credCashTotal").val(roundNumber(cashSubTotal,2));
        $("#credTotal").val(roundNumber(Number(ewtSubTotal + cashSubTotal), 2));

        var ccyList = [];
        for (var i = 0; i < $('.txtccy:not(#template_ccy)').length; i++) {
            ccyList.push($($('.txtccy:not(#template_ccy)')[i]).val());
        }
        if ($('.txtccy:not(#template_ccy)').length > 1 && !(ccyList.every((val, i, arr) => val === arr[0]))) {
            $("#grossTotal").val(0.00);
            $("#credEwtTotal").val(0.00);
            $("#credCashTotal").val(0.00);
            $("#credTotal").val(0.00);
        }
    }
</script>
<script type="text/javascript">
    function roundNumber(num, scale) {
        if (!("" + num).includes("e")) {
            return +(Math.round(num + "e+" + scale) + "e-" + scale);
        } else {
            var arr = ("" + num).split("e");
            var sig = ""
            if (+arr[1] + scale > 0) {
                sig = "+";
            }
            return +(Math.round(+arr[0] + "e" + sig + (+arr[1] + scale)) + "e-" + scale);
        }
    };

    function ddlEnabled(idx) {
        if ($('#item_' + idx).find('.chkVat').is(':checked')) {
            $('#item_' + idx).find('.txtVat').removeAttr('disabled');
        }

        if ($('#item_' + idx).find('.chkEwt').is(':checked')) {
            $('#item_' + idx).find('.txtEwt').removeAttr('disabled');
        }
    };
</script>
<script type="text/javascript" src="~/js/EntryScripts.js"></script>
<script type="text/javascript" src="~/js/HighlightTab.js"></script>