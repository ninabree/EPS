@{
    ViewData["Title"] = "Entry_SS";
}

@using ExpenseProcessingSystem.ViewModels
@using ExpenseProcessingSystem.ConstantData
@using System.Xml.Linq
@model EntryCVViewModelList

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@{
    var role = HttpContextAccessor.HttpContext.Session.GetString("accessType");
    var isMaker = int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.maker;
    var isVerifier = int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.verifier_1_id ||
     int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.verifier_2_id;
    var isApprover = int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.approver_id;
    var aVerifier = role == GlobalSystemValues.ROLE_VERIFIER;
    var anApprover = role == GlobalSystemValues.ROLE_APPROVER;
    var Verifiable = Model.verifier_1_id < 1 || Model.verifier_2_id < 1;
}

<input id="_screen" type="hidden" value="cv" />
@using (Html.BeginForm("VerAppModSS", "Home", FormMethod.Post, new { @class = "validate-form" }))
{
    <div class="tabContent">
        <div id="tbl-lbl">
            <div class="dis-inline-block"><p>Date:</p></div>
            <div class="dis-inline-block">
                @Html.EditorFor(m => m.expenseDate, new { htmlAttributes = new { @class = "input w-97", @type = "date", @readonly = "readonly" } })
            </div>
            <div class="dis-inline-block" style="float:right">
                <p class="dis-inline-block">
                    @Html.TextBoxFor(model => model.expenseYear, new { @readonly = "true", @class = "input" })
                </p>
                -
                <p class="dis-inline-block">
                    @Html.TextBoxFor(model => model.expenseId, new { @readonly = "true", @class = "input" })
                </p>
            </div>
        </div>
        <div class="entry-tbl-cont">
            <table class="table table-bordered table-striped voucher-tbl w-97" id="inputTable">
                <colgroup>
                    <col style="width:14%;" />
                    <col style="width:12%;" />
                    <col style="width:12%;" />
                    <col style="width:10%" />
                    <col style="width:2%;" />
                    <col style="width:6%;" />
                    <col style="width:2%;" />
                    <col style="width:6%;" />
                    <col style="width:2%;" />
                    <col style="width:6%;" />
                    <col style="width:8%;" />
                    <col style="width:8%;" />
                    <col style="width:8%;" />
                    <col style="width:2%;" />
                    <col style="width:2%;" />
                </colgroup>
                <thead>
                    <tr>
                        <th rowspan="2">Gbase Remarks</th>
                        <th rowspan="2">Payee</th>
                        <th rowspan="2">Account</th>
                        <th rowspan="2">Department</th>
                        <th colspan="2" rowspan="2">VAT</th>
                        <th colspan="3" rowspan="2">EWT</th>
                        <th rowspan="2">Currency</th>
                        <th>Debit</th>
                        <th colspan="2">Credit</th>
                        <th rowspan="2"></th>
                    </tr>
                    <tr>
                        <th scope="col">Gross Amount</th>
                        <th scope="col">EWT Amount</th>
                        <th scope="col">Cash</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.EntryCV.Count; i++)
                    {
                        <tr id="item_@i">
                            <td class="p-b-1 p-t-1">
                                <div class="flex-sb">
                                    @Html.HiddenFor(x => Model.EntryCV[i].expenseDtlID, new { @class = "entryDtlID" })
                                    <input value="@Model.EntryCV[i].GBaseRemarks" class="input100 txtgbaseRemarks txtGBaseRemark w-80" disabled="disabled" />
                                    <div id="remark_@i">
                                        <a href="#" class="gRemarks glyphicon glyphicon-folder-open fs-23 m-r-5"></a>
                                        @for (int y = 0; y < Model.EntryCV[i].gBaseRemarksDetails.Count(); y++)
                                        {
                                            @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].docType);
                                            @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].desc);
                                            @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].invNo);
                                            @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].amount);
                                        }
                                    </div>
                                </div>
                            </td>
                            <td>
                                @Html.DropDownListFor(m => Model.EntryCV[i].dtlSSPayee, new SelectList(Model.systemValues.employees, "Value", "Text", Model.systemValues.employees.SelectedValue), new { @class = "input100 txtPayee selectDisabled", disabled = "disabled" })
                            </td>
                            <td data-toggle="tooltip" title="@Model.systemValues.acc.FirstOrDefault(x=> x.accId == Model.EntryCV[i].account).accName" data-placement="right">
                                @Html.DropDownListFor(x => Model.EntryCV[i].account, new SelectList(Model.systemValues.acc, "accId", "accName"), new { @class = "input100 txtAcc selectDisabled", disabled = "disabled" })
                            </td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryCV[i].dept, new SelectList(Model.systemValues.dept, "Value", "Text", Model.systemValues.dept.SelectedValue), new { @class = "input100 selectDisabled", disabled = "disabled" })
                            </td>
                            <td style="text-align:center">
                                @Html.CheckBoxFor(x => Model.EntryCV[i].chkVat, new { @class = "chkVat comVar", disabled = "disabled" })
                            </td>
                            <td>
                                @*@Html.TextBoxFor(x => Model.EntryCV[i].vat, new { @class = "input100 txtVat", @readonly = "true" })*@
                                @Html.DropDownListFor(x => Model.EntryCV[i].vat, new SelectList(Model.EntryCV[i].vendVATList, "VAT_ID", "VAT_Rate"), new { @class = "input100 txtVat comVar selectDisabled", @disabled = "true" })
                            </td>
                            <td style="text-align:center">
                                @Html.CheckBoxFor(x => Model.EntryCV[i].chkEwt, new { @class = "chkEwt comVar", disabled = "disabled" })
                            </td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryCV[i].ewt, new SelectList(Model.EntryCV[i].vendTRList, "TR_ID", "TR_Tax_Rate"), new { @class = "input100 txtEwt comVar selectDisabled", @disabled = "true" })
                            </td>
                            <td style="text-align:center">
                                <a class="reqEWTBtn glyphicon glyphicon-list-alt expenseEWT" href="#" style="pointer-events:none;"></a>
                                @Html.HiddenFor(x => Model.EntryCV[i].dtl_Ewt_Payor_Name_ID, new { @class = "txtPayor" })
                            </td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryCV[i].ccy, new SelectList(Model.systemValues.currency, "Value", "Text", Model.systemValues.currency.SelectedValue), new { @class = "input100 txtccy selectDisabled", disabled = "disabled" })
                                @Html.HiddenFor(x => Model.EntryCV[i].ccy, new { @class = "txtCcyID" })
                                @Html.HiddenFor(m => Model.EntryCV[i].ccyMasterID, new { @class = "currMasterID" })
                                @Html.HiddenFor(x => Model.EntryCV[i].ccyAbbrev, new { @class = "txtCcyAbbrev" })
                            </td>
                            <td>
                                <input value="@Model.EntryCV[i].debitGross" class="input100 txtGross" disabled />
                            </td>
                            <td>
                                <input value="@Model.EntryCV[i].credEwt" class="input100 txtCredEwt" disabled />
                            </td>
                            <td>
                                <input value="@Model.EntryCV[i].credCash" class="input100 txtCredCash" disabled />
                            </td>
                            <td id="req_@i">
                                <a class="cashBreakdown reqBtn glyphicon glyphicon-list-alt" href="#" data-title="Cash Breakdown"></a>
                                @if (Model.EntryCV[i].ccyMasterID != int.Parse(XElement.Load("wwwroot/xml/LiquidationValue.xml").Element("CURRENCY_PHP").Value)
                                 && (Model.statusID == GlobalSystemValues.STATUS_REVERSED || Model.statusID == GlobalSystemValues.STATUS_FOR_PRINTING
                                 || Model.statusID == GlobalSystemValues.STATUS_FOR_CLOSING || Model.statusID == GlobalSystemValues.STATUS_CLOSED
                                  || Model.statusID == GlobalSystemValues.STATUS_POSTED))
                                {
                                    <a class="cddISBtn" href="#" data-title="CDD Instruction Sheet"><img id="imgCDD" src="~/images/cddLogo.png" style="width:100%;height:70%" /></a>
                                }
                                @Html.HiddenFor(x => Model.EntryCV[i].modalInputFlag, new { @class = "hiddenItem" })
                                @Html.HiddenFor(x => Model.EntryCV[i].screenCode, new { @class = "hiddenScreencode" })
                                <div id="divCashBD_@i">
                                    @for (int y = 0; y < Model.EntryCV[i].cashBreakdown.Count(); y++)
                                    {
                                        @Html.HiddenFor(x => Model.EntryCV[i].cashBreakdown[y].cashDenomination)
                                        @Html.HiddenFor(x => Model.EntryCV[i].cashBreakdown[y].cashNoPC)
                                        @Html.HiddenFor(x => Model.EntryCV[i].cashBreakdown[y].cashAmount)
                                    }
                                </div>
                            </td>
                        </tr>
                    }

                    <tr>
                        <td style="border:none; background-color:#f2f2f2" rowspan="2"><a id="addRow" href="#" class="glyphicon glyphicon-plus" style="display:none;"></a></td>
                        <td colspan="9" style="text-align:right; border:none; background-color:#f2f2f2">Subtotal : </td>
                        <td rowspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="grossTotal" value="0" /></div></td>
                        <td><input type="text" readonly class="input100" id="credEwtTotal" value="0" /></td>
                        <td><input type="text" readonly class="input100" id="credCashTotal" value="0" /></td>
                    </tr>
                    <tr>
                        <td colspan="9" style="text-align:right; border:none; background-color:#f2f2f2 ">Total:</td>
                        <td colspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="credTotal" value="0" /></div></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div id="entry-status" class="m-t-10 m-b-10">
            <div class="dis-inline-block"><label>Status: </label></div>
            <div class="dis-inline-block">@Html.DisplayFor(x => x.status, new { @disabled = "disabled", @class = "input" })</div>
            <div class="dis-inline-block m-l-10"><label>Approver:</label></div>
            <div class="dis-inline-block">@Html.DisplayFor(model => model.approver, new { @disabled = "disabled", @class = "input" })</div>
            <div class="dis-inline-block m-l-10"><label>Verifier:</label></div>
            <div class="dis-inline-block">
                @Html.DisplayFor(model => model.verifier_1, new { @disabled = "disabled", @class = " input" })
                @Html.DisplayFor(model => model.verifier_2, new { @disabled = "disabled", @class = " input" })
            </div>
        </div>
        <div id="entry-controls" class="m-b-10">
            @{
                var enableSave = false;
                var enableDelete = (Model.statusID == GlobalSystemValues.STATUS_PENDING ||
                                      Model.statusID == GlobalSystemValues.STATUS_REJECTED) && (isMaker) ? true : false;
                var enableModify = (Model.statusID == GlobalSystemValues.STATUS_PENDING ||
                                      Model.statusID == GlobalSystemValues.STATUS_REJECTED) && (isMaker) ? true : false;

                //enable verify when status is Pending
                var enableVerify = ((Model.statusID == GlobalSystemValues.STATUS_PENDING
                                     //OR if Status is Verified and Verifiers  < 2 and not one of the current verifiers of the transaction
                                     || (Model.statusID == GlobalSystemValues.STATUS_VERIFIED && (!isVerifier) && Verifiable))
                                     //AND Role  is Verifier OR Approver AND not the Maker of the  transaction
                                     && ((aVerifier) || (anApprover))) && (!isMaker) ? true : false;

                var enableApprove = ((Model.statusID == GlobalSystemValues.STATUS_PENDING
                                      || Model.statusID == GlobalSystemValues.STATUS_VERIFIED)) &&
                                  (anApprover) && (!isMaker) && (!isVerifier) ? true : false;

                var enableReject = ((Model.statusID == GlobalSystemValues.STATUS_PENDING
                                        || Model.statusID == GlobalSystemValues.STATUS_VERIFIED) && ((anApprover) || (aVerifier))) && (!isMaker) && (!isVerifier) ? true : false;

                var enableBIR = (Model.statusID == GlobalSystemValues.STATUS_REVERSED ||
                                    Model.statusID == GlobalSystemValues.STATUS_FOR_PRINTING ||
                                    Model.statusID == GlobalSystemValues.STATUS_FOR_CLOSING ||
                                    Model.statusID == GlobalSystemValues.STATUS_POSTED) ? true : false;

                var enableReversal = (Model.statusID == GlobalSystemValues.STATUS_FOR_PRINTING ||
                                    Model.statusID == GlobalSystemValues.STATUS_FOR_CLOSING ||
                                    Model.statusID == GlobalSystemValues.STATUS_POSTED) ? true : false;
            }
            @Html.HiddenFor(x => Model.entryID, new { @class= "entryID" })
            @if (isMaker || isVerifier || isApprover || aVerifier || anApprover)
            {
                <div class="flex-sb">
                    <div>
                        <div class="dis-inline-block">@if(enableSave) { <button class="tbl-btn">Save</button> }</div>
                        <div class="dis-inline-block">@if(enableDelete) { <button class="tbl-btn btnEntryAction" value="Delete" name="command">Delete</button> }</div>
                        <div class="dis-inline-block">@if(enableModify) { <button class="tbl-btn btnEntryAction" value="Modify" name="command">Modify</button> }</div>
                        <div class="dis-inline-block">@if(enableVerify) { <button class="tbl-btn btnEntryAction" value="verifier" name="command">Verify</button> }</div>
                        <div class="dis-inline-block">@if(enableApprove) { <button class="tbl-btn btnEntryAction" value="approver" name="command">Approve</button> }</div>
                        <div class="dis-inline-block">@if(enableReject) { <button class="tbl-btn btnEntryAction" value="Reject" name="command">Reject</button> }</div>
                    </div>
                    <div>
                        <div class="dis-inline-block">@if(enableBIR) { <button class="tbl-btn" id="printBir" value="printBir">Print BIR Certificate</button> }</div>
                        <div class="dis-inline-block">@if(enableReversal) { <button class="tbl-btn btnEntryAction" id="reversal_entry" value="Reversal" name="command">Create Reversal Entry</button> }</div>
                    </div>
                </div>
            }
        </div>
        <div id="modalDiv">
            @Html.Partial("ModalGBase")
        </div>
        @Html.Partial("ModalPartial2")
    </div>
    <input type="hidden" id="phpID" value="@Model.phpCurrID" />
    <input type="hidden" id="phpAbbrv" value="@Model.phpAbbrev" />
    <input type="hidden" id="phpMasterID" value="@Model.phpCurrMasterID" />
    <input type="hidden" name="command" id="btnID" />
}
@*validation message*@
<div id="ValidationSummary" style="display:none" class="">
    @Html.ValidationSummary(false, "", new { @id = "validationSummary" })
</div>
<script>
    $(document).ready(function () {
        if ($('#alert').text() != "") {
            $('#divAlertWindow').show();
        }

        //Enable Cash breakdown button if currency = PHP, disable if not.
        var trs = $("#inputTable").find("tbody").find("tr");
        for (var cnt = 0; cnt < trs.length - 2; cnt++) {
            reqBtnDisable(cnt);
            ddlEnabled(cnt);
        }

        var gross = $(".txtGross");
        var credEwt = $(".txtCredEwt");
        var credCash = $(".txtCredCash");

        var grossTotal = 0;
        var ewtSubTotal = 0;
        var cashSubTotal = 0;

        for (var i = 0; i < gross.length; i++) {
            grossTotal += Number(gross[i].value);
        }

        for (var i = 0; i < credEwt.length; i++) {
            ewtSubTotal += Number(credEwt[i].value);
        }

        for (var i = 0; i < credCash.length; i++) {
            cashSubTotal += Number(credCash[i].value);
        }

        $("#grossTotal").val(roundNumber(grossTotal, 2));
        $("#credEwtTotal").val(roundNumber(ewtSubTotal, 2));
        $("#credCashTotal").val(roundNumber(cashSubTotal,2));
        $("#credTotal").val(roundNumber(Number(ewtSubTotal + cashSubTotal), 2));

        var ccyList = [];
        for (var i = 0; i < $('.txtccy:not(#template_ccy)').length; i++) {
            ccyList.push($($('.txtccy:not(#template_ccy)')[i]).val());
        }
        if ($('.txtccy:not(#template_ccy)').length > 1 && !(ccyList.every((val, i, arr) => val === arr[0]))) {
            $("#grossTotal").val(0.00);
            $("#credEwtTotal").val(0.00);
            $("#credCashTotal").val(0.00);
            $("#credTotal").val(0.00);
        }

        $(function () {
            //Cash Breakdown Modal
            $("table").on("click", ".cashBreakdown", function (e) {
                e.stopImmediatePropagation();

                var pNode = $(this.parentNode)[0].parentNode;
                var id = pNode.id;
                var modalDivBody = $('.modal-body');
                var modalDivFooter = $('.modal-footer').find("#add_row_btn").remove();;

                $('.modal-header').find('.modal-title').remove();
                $('.modal-header').append('<h4 class="modal-title">Cash Breakdown</h4>');

                modalDivBody.load("@Url.Action("EntryExpenseCashBreakdown", "Modal")", {
                    "id": id,
                    "vendor": $("#" + pNode.id).find(".txtPayee option:selected").text(),
                    "account": $("#" + pNode.id).find(".txtAcc option:selected").text(),
                    "amount": $("#" + pNode.id).find(".txtCredCash").val(),
                    "screencode": $("#" + pNode.id).find(".hiddenScreencode").val()
                }, function (response, status, xhr) {
                    if (status == "error") {
                        alert("Something went wrong.");
                    } else {
                        if ($("#parentIdCashBreakdown") != null) {
                            var tableRef = document.getElementById('modalTable').getElementsByTagName('tbody')[0];
                            //var tableRef = $("#modalTable").children("tbody");
                            var grossAmount = Number($("#" + id).find(".txtGross").val());
                        }
                    }
                });

                $('#myModal').modal('show');
            });
        });

        //CDD Instruction sheet for Cash Advance(Suspense & Sundry) excel output cddISBtn
        $("table").on("click", ".cddISBtn", function (e) {
            e.stopImmediatePropagation();

            var pNode = $(this.parentNode)[0].parentNode;
            window.location.href = "/Home/CDD_IS_SS?entryID=" + $('.entryID').val()
                + "&entryDtlID=" + $('#' + pNode.id).find('.entryDtlID').val()
                + "&ccyAbbr=" + $('#' + pNode.id).find('.txtCcyAbbrev').val();
        });

        $("table").on("click", ".expenseEWT", function (e) {
                e.stopImmediatePropagation();
                var myModal2 = $('.myModal2');
                var modalDiv2 = $(myModal2).find('div div');
                var modalDivHeader2 = $(modalDiv2).find('.modal-header2');
                var modalDivBody2 = $(modalDiv2).find('.modal-body2');
                var modalDivFooter2 = $(modalDiv2).find('.modal-footer2');

                var pNode = $(this.parentNode)[0].parentNode;
                var taxpayor = $("#" + pNode.id).find(".txtPayor").val()

                //remove prev contents
                modalDivBody2.empty();
                modalDivHeader2.find('h4').remove();
                modalDivFooter2.find("#add_row_btn").remove();

                //set modal header title
                modalDivHeader2.append('<h4 class="modal-title">EWT Information</h4>');
                modalDivBody2.load("@Url.Action("EntryExpenseEWT", "Modal")", {
                    "id": pNode.id,
                    "taxpayor": taxpayor
                }, function (response, status, xhr) {
                    if (status == "error") {
                        alert("Something went wrong.");
                    }
                });

            $(myModal2).modal('show');
        });
    });
</script>
<script type="text/javascript">
    function round(value, exp) {
        if (typeof exp === 'undefined' || +exp === 0)
            return Math.round(value);

        value = +value;
        exp = +exp;

        if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0))
            return NaN;

        // Shift
        value = value.toString().split('e');
        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));

        // Shift back
        value = value.toString().split('e');
        return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));
    };

    function reqBtnDisable(idx) {
        if ($('#EntryCV_' + idx + '__ccy').find(':selected').text() != $('#phpAbbrv').val()) {
            $('#req_' + idx).find('.reqBtn').css("pointer-events", "none");
            $('#item_' + idx).find('.reqEWTBtn').css("pointer-events", "none");
        } else {
            $('#req_' + idx).find('.reqBtn').css("pointer-events", "auto");
            $('#item_' + idx).find('.reqEWTBtn').css("pointer-events", "auto");
        }
    };
    function ddlEnabled(idx) {
        var pid = '#item_' + idx;

        if (!$(pid).find(".chkEwt").is(':checked')) {
            if ($(pid).find(".chkVat").is(':checked')) {
                $(pid).find('.reqEWTBtn').css("pointer-events", "auto");
            } else {
                $(pid).find('.reqEWTBtn').css("pointer-events", "none");
            }
        } else {
            $(pid).find('.reqEWTBtn').css("pointer-events", "auto");
        }

        if (!$(pid).find(".chkVat").is(':checked')) {
            if ($(pid).find(".chkEwt").is(':checked')) {
                $(pid).find('.reqEWTBtn').css("pointer-events", "auto");
            } else {
                $(pid).find('.reqEWTBtn').css("pointer-events", "none");
            }
        } else {
            $(pid).find('.reqEWTBtn').css("pointer-events", "auto");
        }
    };
</script>
<script type="text/javascript" src="~/js/EntryScripts.js"></script>
<script type="text/javascript">
    $(function () {
        @*$(window).on("load", function () {
            if (@ViewBag.Success == 1) {
                alert("Entry Approved");
            } else if (@ViewBag.Success == 0){
                alert("Entry Failed");
            }
        });*@
        @if (int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.maker
          || int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.verifier_1_id
          || int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.verifier_2_id
          || int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.approver_id)
        {
            <Text>
            $("#entry-controls").on("click", "#printBir", function (e) {
                var vendorID = @Model.selectedPayee;
                var approverID = @Model.approver_id;
                var link = [
                @foreach (var item in Model.birForms)
                {
                    <Text>
                         "/Home/Generate2307File?_vendor=@item.vendor&_ewt=@item.ewt&_tax=@item.vat&_amount=@item.amount&date=@item.date&approver=@item.approver&expID=@Model.entryID",
                    </Text>
                }
                    ""
                ];

                for (var i = 0; i < link.length - 1; i++) {
                    window.open(link[i]);
                }
                $.getJSON('UpdateBIR2307PrintingStatus', { entryID: @Html.Raw(Json.Serialize(Model.entryID)) }, function (data) {

                });
                return false;
            });
            </Text>
        }

    });
</script>