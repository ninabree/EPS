@{
    ViewData["Title"] = "Entry_CV";
}
@using ExpenseProcessingSystem.ViewModels
@model EntreeCVViewModelList
@inject IJsonHelper Json;

<div class="tabContent">
    @using (Html.BeginForm("Entry_NewCV", "Home", FormMethod.Post, new { @class = "validate-form" }))
    {
        <div id="tbl-lbl" class="flex-sb">
            <div class="dis-inline-block">Date: <p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseDate, new { type = "date", @readonly = "true", @class = "input" })</p> </div>
            <div class="dis-inline-block"><p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseYear, new { @readonly = "true", @class = "input" })</p> - <p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseId, new { @readonly = "true", @class = "input" })</p></div>
            <div class="dis-inline-block float-r">Check No : <p class="dis-inline-block">@Html.TextBoxFor(model => model.checkNo, new { @readonly = "true", @class = "input" })</p></div>
        </div>
        <div id="tbl-lbl">
            <div class="dis-inline-block"><p>Payee:</p></div>
            <div class="dis-inline-block">
                @Html.DropDownListFor(m => m.vendor, new SelectList(Model.systemValues.vendors,"Value","Text",Model.systemValues.vendors.SelectedValue))
            </div>
        </div>
        <div class="flex-c">
            <table class="table table-bordered table-striped voucher-tbl w-97" id="inputTable">
                <colgroup>
                    <col style="width:20%;" />
                    <col style="width:15%;" />
                    <col style="width:3%;" />
                    <col style="width:10%" />
                    <col style="width:2%;" />
                    <col style="width:5%;" />
                    <col style="width:2%;" />
                    <col style="width:5%;" />
                    <col style="width:7%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                    <col style="width:10%;" />
                    <col style="width:2%;" />
                </colgroup>
                <thead>
                    <tr>
                        <th rowspan="2">Gbase Remarks</th>
                        <th rowspan="2">Account</th>
                        <th rowspan="2">FBT</th>
                        <th rowspan="2">Department</th>
                        <th colspan="2" rowspan="2">VAT</th>
                        <th colspan="2" rowspan="2">EWT</th>
                        <th rowspan="2">Currency</th>
                        <th>Debit</th>
                        <th colspan="2">Credit</th>
                    </tr>
                    <tr>
                        <th scope="col">Gross Amount</th>
                        <th scope="col">EWT Amount</th>
                        <th scope="col">Cash</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.EntreeCV.Count; i++)
                    {
                        <tr id="item_@i">
                            <td class="p-b-1 p-t-1">@Html.TextBoxFor(x => Model.EntreeCV[i].GBaseRemarks, new { @class = "input100" })</td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntreeCV[i].account, new SelectList(Model.systemValues.acc, "Value", "Text", Model.systemValues.acc.SelectedValue), new { @class = "input100" })
                            </td>
                            <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntreeCV[i].fbt)</td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntreeCV[i].dept, new SelectList(Model.systemValues.dept, "Value", "Text", Model.systemValues.dept.SelectedValue), new { @class = "input100" })
                            </td>
                            <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntreeCV[i].chkVat,new { @class = "chkVat" })</td>
                            <td>@Html.TextBoxFor(x => Model.EntreeCV[i].vat, new { @class = "input100 txtVat", @readonly = "true"})</td>
                            <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntreeCV[i].chkEwt, new { @class = "chkEwt" })</td>
                            <td>
                                @Html.TextBoxFor(x => Model.EntreeCV[i].ewt, new { @class = "input100 txtEwt", @readonly = "true" })
                                                        @Html.DropDownListFor(x => Model.EntreeCV[i].ewt, new SelectList(Model.systemValues.ewt, "Value", "Text", Model.systemValues.dept.SelectedValue), new { @class = "input100" })
                                                    </td>
                            <td>@Html.TextBoxFor(x => Model.EntreeCV[i].ccy, new { @class = "input100" })</td>
                            <td>@Html.TextBoxFor(x => Model.EntreeCV[i].debitGross, new { @class = "input100" })</td>
                            <td>@Html.TextBoxFor(x => Model.EntreeCV[i].credEwt, new { @class = "input100", @readonly = "true" })</td>
                            <td>@Html.TextBoxFor(x => Model.EntreeCV[i].credCash, new { @class = "input100", @readonly = "true" })</td>
                            <td><a class="expenseAmortization glyphicon glyphicon-list-alt" href="#"></a></td>
                        </tr>
                    }

                    <tr>
                        <td style="border:none; background-color:#f2f2f2" rowspan="2"><a id="addRow" href="#" class="glyphicon glyphicon-plus"></a></td>
                        <td colspan="8" style="text-align:right; border:none; background-color:#f2f2f2">Subtotal : </td>
                        <td rowspan="2"></td>
                        <td></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="8" style="text-align:right; border:none; background-color:#f2f2f2 ">Total : </td>
                        <td colspan="2"></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div id="voucherPreview" class="border-solid">
            <div id="tbl-lbl">
                <div class="dis-inline-block"><p>Preview of Voucher:</p></div>
            </div>
            @Html.Partial("CVPartial")
        </div>
        <div id="entry-status" class="m-t-10 m-b-10">
            <div class="dis-inline-block"><label>Status:</label></div>
            <div class="dis-inline-block">@Html.TextBoxFor(model => model.status, new { @readonly = "true", @class = "input" })</div>
            <div class="dis-inline-block"><label>Approver:</label></div>
            <div class="dis-inline-block">@Html.TextBoxFor(model => model.approver, new { @readonly = "true", @class = "input" })</div>
            <div class="dis-inline-block"><label>Verifier:</label></div>
            <div class="dis-inline-block">
                @if (Model.verifier == null)
                {
                    <p class="dis-inline-block"><input type="text" readonly="true" class="input" /></p>
                }
                else
                {
                    for (int i = 0; i < Model.verifier.Count; i++)
                    {
                    <p class="dis-inline-block">@Html.TextBoxFor(model => model.verifier[i], new { @readonly = "true", @class = "m-l-5 input" })</p>
                    }
                }
            </div>
        </div>
        <div id="entry-controls" class="m-b-10">
            <div class="flex-sb">
                <div>
                    <div class="dis-inline-block tbl-btn"><button>Save</button></div>
                    <div class="dis-inline-block tbl-btn"><button>Delete</button></div>
                    <div class="dis-inline-block tbl-btn"><button>Modify</button></div>
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button id="reversal_entry">Create Reversal Entry</button></div>
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn m-l-41"><button>Print Check</button></div>
                </div>
                
            </div>
            <div class="flex-sb">
                <div>
                    <div class="dis-inline-block tbl-btn"><button>Approve/Verify</button></div>
                    <div class="dis-inline-block tbl-btn"><button>Reject</button></div>
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button>Delete GBase Post</button></div>
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button>Print BIR Certificate</button></div>
                </div>
            </div>
        </div>
    }

    @Html.Partial("ModalPartial")
</div>

<script>
    $(function () {
        $("#addRow").click(function (e) {
            var itemCount = document.getElementById('inputTable').getElementsByTagName('tbody')[0].childElementCount - 2;
            var tableRef = document.getElementById('inputTable').getElementsByTagName('tbody')[0];

            var acc = @Html.Raw(Json.Serialize(Model.systemValues.acc));
            var dept = @Html.Raw(Json.Serialize(Model.systemValues.dept));
            var curr = @Html.Raw(Json.Serialize(Model.systemValues.currency));
            var ewt = @Html.Raw(Json.Serialize(Model.systemValues.ewt));

            // Insert a row in the table at the last row
            var newRow = tableRef.insertRow(itemCount);
            newRow.id = "item_" + itemCount

            var htmlContent = '<td class="p-b-1 p-t-1"><input class="input100" id="EntreeCV_' + itemCount + '__GBaseRemarks" name="EntreeCV[' + itemCount + '].GBaseRemarks" type="text" value=""></td>' +
                '<td><select class="input100" id="EntreeCV_' + itemCount + '__account" name="EntreeCV[' + itemCount + '].account">';

            for (var i = 0; i < acc.length; i++) {
                htmlContent += '<option value="' + acc[i]["value"] + '">' + acc[i]["text"] + '</option>';
            }

            htmlContent += '</select></td>' +
                '<td style="text-align:center"><input data-val="true" data-val-required="The fbt field is required." id="EntreeCV_' + itemCount + '__fbt" name="EntreeCV[' + itemCount + '].fbt" type="checkbox" value="true"></td>' +
                '<td><select class="input100" id="EntreeCV_' + itemCount + '__dept" name="EntreeCV[' + itemCount + '].dept">';
            for (var i = 0; i < dept.length; i++) {
                htmlContent += '<option value="' + dept[i]["value"] + '">' + dept[i]["text"] + '</option>';
            }

            htmlContent += '</select></td>' +
                '<td style="text-align:center"><input class="chkVat" data-val="true" data-val-required="The chkVat field is required." id="EntreeCV_' + itemCount + '__chkVat" name="EntreeCV[' + itemCount + '].chkVat" type="checkbox" value="true"></td>' +
                '<td><input class="input100 txtVat" data-val="true" data-val-number="The field vat must be a number." data-val-required="The vat field is required." id="EntreeCV_' + itemCount + '__vat" name="EntreeCV[' + itemCount + '].vat" readonly="true" type="text" value="0"></td>' +
                '<td style="text-align:center"><input class="chkEwt" data-val="true" data-val-required="The chkEwt field is required." id="EntreeCV_' + itemCount + '__chkEwt" name="EntreeCV[' + itemCount + '].chkEwt" type="checkbox" value="true"></td>' +
                '<td><input class="input100 txtEwt" data-val="true" data-val-number="The field ewt must be a number." data-val-required="The ewt field is required." id="EntreeCV_' + itemCount + '__ewt" name="EntreeCV[' + itemCount + '].ewt" readonly="true" type="text" value="0"></td>' +
                '<td><input class="input100" id="EntreeCV_' + itemCount + '__ccy" name="EntreeCV[' + itemCount + '].ccy" type="text" value=""></td>' +
                '<td><input class="input100" data-val="true" data-val-number="The field debitGross must be a number." data-val-required="The debitGross field is required." id="EntreeCV_' + itemCount + '__debitGross" name="EntreeCV[' + itemCount + '].debitGross" type="text" value="0"></td>' +
                '<td><input class="input100" data-val="true" data-val-number="The field credEwt must be a number." data-val-required="The credEwt field is required." id="EntreeCV_' + itemCount + '__credEwt" name="EntreeCV[' + itemCount + '].credEwt" type="text" readonly="true" value="0"></td>' +
                '<td><input class="input100" data-val="true" data-val-number="The field credCash must be a number." data-val-required="The credCash field is required." id="EntreeCV_' + itemCount + '__credCash" name="EntreeCV[' + itemCount + '].credCash" type="text" readonly="true" value="0"></td>' +
                '<td><a class="expenseAmortization glyphicon glyphicon-list-alt" href="#"></a></td>';

            newRow.innerHTML = htmlContent;
        });

        $("table").on("change","input.chkVat",function (e) {
            var pNode = $(this.parentNode)[0].parentNode;

            var itemNo = pNode.id; //jquery obj
            var rBtnVal = $(this).is(':checked');
            if (rBtnVal) {
                $("#" + itemNo).find(".txtVat").attr("readonly",false);
            } else {
                $("#" + itemNo).find(".txtVat").attr("readonly",true);
            }
        });

        $("table").on("change", "input.chkEwt", function (e) {
            var pNode = $(this.parentNode)[0].parentNode;

            var itemNo = pNode.id; //jquery obj
            var rBtnVal = $(this).is(':checked');
            if (rBtnVal) {
                $("#" + itemNo).find(".txtEwt").attr("readonly", false);
            } else {
                $("#" + itemNo).find(".txtEwt").attr("readonly", true);
            }
        });

    });
</script>