@{
    ViewData["Title"] = "Entry_CV";
}
@using ExpenseProcessingSystem.ViewModels
@model EntryCVViewModelList

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

<div class="tabContent">

    <div id="tbl-lbl" class="flex-sb">
        <div class="dis-inline-block w-20">Date: <p class="dis-inline-block w-70">@Html.TextBoxFor(model => model.expenseDate, new { @readonly = "true", @class = "input w-97" })</p> </div>
        <div class="dis-inline-block"><p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseYear, new { @readonly = "true", @class = "input" })</p> - <p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseId, new { @readonly = "true", @class = "input" })</p></div>
        <div class="dis-inline-block float-r">Check No : <p class="dis-inline-block">@Html.TextBoxFor(model => model.checkNo, new { @readonly = "true", @class = "input" })</p></div>
    </div>
    <div id="tbl-lbl">
        <div class="dis-inline-block"><p>Payee:</p></div>
        <div class="dis-inline-block">
            @Html.DropDownListFor(m => m.vendor, new SelectList(Model.systemValues.vendors, "Value", "Text", Model.systemValues.vendors.SelectedValue), new { @disabled = "true" })
        </div>
    </div>
    <div class="flex-c">
        <table class="table table-bordered table-striped voucher-tbl w-97" id="inputTable">
            <colgroup>
                <col style="width:20%;" />
                <col style="width:15%;" />
                <col style="width:3%;" />
                <col style="width:10%" />
                <col style="width:2%;" />
                <col style="width:5%;" />
                <col style="width:2%;" />
                <col style="width:5%;" />
                <col style="width:7%;" />
                <col style="width:10%;" />
                <col style="width:10%;" />
                <col style="width:10%;" />
                <col style="width:2%;" />
            </colgroup>
            <thead>
                <tr>
                    <th rowspan="2">Gbase Remarks</th>
                    <th rowspan="2">Account</th>
                    <th rowspan="2">FBT</th>
                    <th rowspan="2">Department</th>
                    <th colspan="2" rowspan="2">VAT</th>
                    <th colspan="2" rowspan="2">EWT</th>
                    <th rowspan="2">Currency</th>
                    <th>Debit</th>
                    <th colspan="2">Credit</th>
                </tr>
                <tr>
                    <th scope="col">Gross Amount</th>
                    <th scope="col">EWT Amount</th>
                    <th scope="col">Cash</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.EntryCV.Count; i++)
                {
                    <tr id="item_@i">
                        <td class="p-b-1 p-t-1">
                            <div class="flex-sb">
                                <input value="@Model.EntryCV[i].GBaseRemarks" class="input100 w-80" disabled />
                                <div id="remark_@i">
                                    <a href="#" class="gRemarks glyphicon glyphicon-folder-open fs-23 m-r-5"></a>
                                    @for (int y = 0; y < Model.EntryCV[i].gBaseRemarksDetails.Count(); y++)
                                    {
                                        @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].docType);
                                        @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].desc);
                                        @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].invNo);
                                        @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].amount);
                                    }
                                </div>
                            </div>
                        </td>
                        <td><input value="@Model.EntryCV[i].account" class="input100" disabled /></td>
                        <td style="text-align:center">@Html.DisplayFor(x => Model.EntryCV[i].fbt)</td>
                        <td><input value="@Model.EntryCV[i].dept" class="input100" disabled /></td>
                        <td style="text-align:center">@Html.DisplayFor(x => Model.EntryCV[i].chkVat, new { @class = "chkVat" })</td>
                        <td><input value="@Model.EntryCV[i].vat" class="input100" disabled /></td>
                        <td style="text-align:center">@Html.DisplayFor(x => Model.EntryCV[i].chkEwt, new { @class = "chkEwt" })</td>
                        <td><input value="@Model.EntryCV[i].ewt" class="input100" disabled /></td>
                        <td><input value="@Model.EntryCV[i].ccy" class="input100" disabled /></td>
                        <td><input value="@Model.EntryCV[i].debitGross" class="input100" disabled /></td>
                        <td><input value="@Model.EntryCV[i].credEwt" class="input100" disabled /></td>
                        <td><input value="@Model.EntryCV[i].credCash" class="input100" disabled /></td>
                        <td id="req_@i">
                            @if (Model.EntryCV[i].amtDetails.Count > 0)
                            {
                                <a class="expenseAmortization reqBtn glyphicon glyphicon-list-alt" href="#"></a>
                                @Html.HiddenFor(x => Model.EntryCV[i].month, new { @class = "txtAmorMonth" })
                                @Html.HiddenFor(x => Model.EntryCV[i].day, new { @class = "txtAmorDay" })
                                @Html.HiddenFor(x => Model.EntryCV[i].duration, new { @class = "txtAmorDuration" })
                                @for (int y = 0; y < Model.EntryCV[i].amtDetails.Count(); y++)
                                {
                                    @Html.HiddenFor(x => Model.EntryCV[i].amtDetails[y].amtDate);
                                    @Html.HiddenFor(x => Model.EntryCV[i].amtDetails[y].amtAmount);
                                }
                            }
                            else
                            {
                                <a class="reqBtn glyphicon glyphicon-list-alt"></a>
                            }

                        </td>
                    </tr>
                }

                <tr>
                    <td style="border:none; background-color:#f2f2f2" rowspan="2"><a id="addRow" href="#" class="glyphicon glyphicon-plus"></a></td>
                    <td colspan="8" style="text-align:right; border:none; background-color:#f2f2f2">Subtotal : </td>
                    <td rowspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="grossTotal" /></div></td>
                    <td><input type="text" readonly class="input100" id="credEwtTotal" /></td>
                    <td><input type="text" readonly class="input100" id="credCashTotal" /></td>
                </tr>
                <tr>
                    <td colspan="8" style="text-align:right; border:none; background-color:#f2f2f2 ">Total : </td>
                    <td colspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="credTotal" /></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div id="voucherPreview" class="border-solid">
        <div id="tbl-lbl">
            <div class="dis-inline-block"><p>Preview of Voucher:</p></div>
        </div>
        @Html.Partial("CVPartial")
    </div>
    <div id="entry-status" class="m-t-10 m-b-10">
        <div class="dis-inline-block"><label>Status: </label></div>
        <div class="dis-inline-block">@Html.TextBoxFor(x => x.status, new { @readonly = "true", @class = "input" })</div>
        <div class="dis-inline-block"><label>Approver:</label></div>
        <div class="dis-inline-block">@Html.TextBoxFor(model => model.approver, new { @readonly = "true", @class = "input" })</div>
        <div class="dis-inline-block"><label>Verifier:</label></div>
        <div class="dis-inline-block">
            <p class="dis-inline-block">@Html.TextBoxFor(model => model.verifier_1, new { @readonly = "true", @class = "m-l-5 input" })</p>
            <p class="dis-inline-block">@Html.TextBoxFor(model => model.verifier_2, new { @readonly = "true", @class = "m-l-5 input" })</p>
        </div>
    </div>
    <div id="entry-controls" class="m-b-10">
        @using (Html.BeginForm("VerAppModCV", "Home", FormMethod.Post, new { @class = "validate-form" }))
        {
            @Html.HiddenFor(x => Model.entryID)
            <div class="flex-sb">
                <div>
                    <div class="dis-inline-block tbl-btn"><button disabled>Save</button></div>

                    @if (int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.maker)
                    {
                        <div class="dis-inline-block tbl-btn"><button>Delete</button></div>
                        <div class="dis-inline-block tbl-btn"><button value="Modify" name="command">Modify</button></div>
                    }
                    else
                    {
                        <div class="dis-inline-block tbl-btn"><button disabled>Delete</button></div>
                        <div class="dis-inline-block tbl-btn"><button disabled>Modify</button></div>
                    }
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button id="reversal_entry" disabled>Create Reversal Entry</button></div>
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn m-l-41"><button disabled>Print Check</button></div>
                </div>

            </div>
            <div class="flex-sb">
                <div>
                    <div class="dis-inline-block tbl-btn"><button value="@HttpContextAccessor.HttpContext.Session.GetString("accessType")" name="command">Approve/Verify</button></div>
                    <div class="dis-inline-block tbl-btn"><button value="Reject" name="command">Reject</button></div>
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button disabled>Delete GBase Post</button></div>
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button disabled>Print BIR Certificate</button></div>
                </div>
            </div>
        }
    </div>
    <div id="modalDiv">
        @Html.Partial("ModalPartial")
    </div>
</div>

<script type="text/javascript" src="~/js/EntryScripts.js"></script>