@{
    ViewData["Title"] = "Entry_CV";
}
@using ExpenseProcessingSystem.ViewModels
@using ExpenseProcessingSystem.ConstantData
@model EntryCVViewModelList

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@{
    var role = HttpContextAccessor.HttpContext.Session.GetString("accessType");
    var isMaker = int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.maker;
    var isVerifier = int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.verifier_1_id ||
     int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.verifier_2_id;
    var isApprover = int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.approver_id;
    var aVerifier = role == GlobalSystemValues.ROLE_VERIFIER;
    var anApprover = role == GlobalSystemValues.ROLE_APPROVER;
    var Verifiable = Model.verifier_1_id < 1 || Model.verifier_2_id < 1;
}
<div class="tabContent">
    <input id="_screen" type="hidden" value="cv_ViewOnly" />
    <div id="tbl-lbl" class="flex-sb">
        <div class="dis-inline-block w-20">Date: <p class="dis-inline-block w-70">@Html.TextBoxFor(model => model.expenseDate, new { @readonly = "true", @class = "input w-97" })</p> </div>
        <div class="dis-inline-block"><p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseYear, new { @readonly = "true", @class = "input" })</p> - <p class="dis-inline-block">@Html.TextBoxFor(model => model.expenseId, new { @readonly = "true", @class = "input" })</p></div>
        <div class="dis-inline-block float-r">Check No : <p class="dis-inline-block">@Html.TextBoxFor(model => model.checkNo, new { @readonly = "true", @class = "input" })</p></div>
    </div>
    <div id="tbl-lbl">
        <div class="dis-inline-block"><p>Payee:</p></div>
        <div class="dis-inline-block">
            @Html.DropDownListFor(m => m.vendor, new SelectList(Model.systemValues.vendors, "Value", "Text", Model.systemValues.vendors.SelectedValue), new { @disabled = "true", @class= "selectDisabled" })
        </div>
    </div>
    <div class="">
        <table class="table table-bordered table-striped voucher-tbl w-97" id="inputTable">
            <colgroup>
                <col style="width:20%;" />
                <col style="width:15%;" />
                <col style="width:3%;" />
                <col style="width:10%" />
                <col style="width:2%;" />
                <col style="width:5%;" />
                <col style="width:2%;" />
                <col style="width:5%;" />
                <col style="width:7%;" />
                <col style="width:10%;" />
                <col style="width:10%;" />
                <col style="width:10%;" />
                <col style="width:2%;" />
            </colgroup>
            <thead>
                <tr>
                    <th rowspan="2">Gbase Remarks</th>
                    <th rowspan="2">Account</th>
                    <th rowspan="2">FBT</th>
                    <th rowspan="2">Department</th>
                    <th colspan="2" rowspan="2">VAT</th>
                    <th colspan="2" rowspan="2">EWT</th>
                    <th rowspan="2">Currency</th>
                    <th>Debit</th>
                    <th colspan="2">Credit</th>
                </tr>
                <tr>
                    <th scope="col">Gross Amount</th>
                    <th scope="col">EWT Amount</th>
                    <th scope="col">Cash</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.EntryCV.Count; i++)
                {
                    <tr id="item_@i">
                        <td class="p-b-1 p-t-1">
                            <div class="flex-sb">
                                <input value="@Model.EntryCV[i].GBaseRemarks" class="txtgbaseRemarks input100 w-80" disabled />
                                <div id="remark_@i">
                                    <a href="#" class="gRemarks glyphicon glyphicon-folder-open fs-23 m-r-5"></a>
                                    @for (int y = 0; y < Model.EntryCV[i].gBaseRemarksDetails.Count(); y++)
                                    {
                                        @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].docType);
                                        @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].desc);
                                        @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].invNo);
                                        @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].amount);
                                    }
                                </div>
                            </div>
                        </td>
                        <td>@Html.DropDownListFor(x => Model.EntryCV[i].account, new SelectList(Model.systemValues.acc, "accId", "accName"), new { @class = "input100 txtAcc selectDisabled", disabled = "disabled" })</td>
                        <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntryCV[i].fbt, new { @disabled = "true" })</td>
                        <td>@Html.DropDownListFor(x => Model.EntryCV[i].dept, new SelectList(Model.systemValues.dept, "Value", "Text", Model.systemValues.dept.SelectedValue), new { @class = "input100 selectDisabled", disabled = "disabled" })</td>
                        <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntryCV[i].chkVat, new { @class = "chkVat", @disabled = "true" })</td>
                        <td>@Html.DropDownListFor(x => Model.EntryCV[i].vat, new SelectList(Model.systemValues.vat, "Value", "Text", Model.systemValues.vat.SelectedValue), new { @class = "input100 txtVat selectDisabled", disabled = "disabled" })</td>
                        <td style="text-align:center">@Html.CheckBoxFor(x => Model.EntryCV[i].chkEwt, new { @class = "chkEwt", @disabled = "true" })</td>
                        <td>@Html.DropDownListFor(x => Model.EntryCV[i].ewt, new SelectList(Model.systemValues.ewt, "Value", "Text", Model.systemValues.ewt.SelectedValue), new { @class = "input100 txtEwt selectDisabled", disabled = "disabled" })</td>
                        <td><input value="@Model.EntryCV[i].ccyAbbrev" class="input100" disabled /></td>
                        <td><input value="@Model.EntryCV[i].debitGross" class="input100" disabled /></td>
                        <td><input value="@Model.EntryCV[i].credEwt" class="input100" disabled /></td>
                        <td><input value="@Model.EntryCV[i].credCash" class="input100" disabled /></td>
                        <td id="req_@i">
                            @if (Model.EntryCV[i].amtDetails.Count > 0)
                            {
                                <a class="expenseAmortization reqBtn glyphicon glyphicon-list-alt" href="#"></a>
                                @Html.HiddenFor(x => Model.EntryCV[i].month, new { @class = "txtAmorMonth" })
                                @Html.HiddenFor(x => Model.EntryCV[i].day, new { @class = "txtAmorDay" })
                                @Html.HiddenFor(x => Model.EntryCV[i].duration, new { @class = "txtAmorDuration" })
                                @for (int y = 0; y < Model.EntryCV[i].amtDetails.Count(); y++)
                                {
                                    @Html.HiddenFor(x => Model.EntryCV[i].amtDetails[y].amtDate);
                                    @Html.HiddenFor(x => Model.EntryCV[i].amtDetails[y].amtAmount);
                                }
                            }
                            else
                            {
                                <a class="reqBtn glyphicon glyphicon-list-alt"></a>
                            }

                        </td>
                    </tr>
                }

                <tr>
                    <td style="border:none; background-color:#f2f2f2" rowspan="2"><a id="addRow" href="#" class="glyphicon glyphicon-plus"></a></td>
                    <td colspan="8" style="text-align:right; border:none; background-color:#f2f2f2">Subtotal : </td>
                    <td rowspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="grossTotal" /></div></td>
                    <td><input type="text" readonly class="input100" id="credEwtTotal" /></td>
                    <td><input type="text" readonly class="input100" id="credCashTotal" /></td>
                </tr>
                <tr>
                    <td colspan="8" style="text-align:right; border:none; background-color:#f2f2f2 ">Total : </td>
                    <td colspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="credTotal" /></div></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div id="voucherPreview" class="border-solid">
        <div id="tbl-lbl">
            <div class="dis-inline-block"><p>Preview of Voucher:</p></div>
        </div>
        <iframe id="iframePreview" frameborder="0" src="" style="position: relative; min-height: 50vh; max-height: 100%; width: 100%;"></iframe>
    </div>
    <div id="entry-status" class="m-t-10 m-b-10">
        <div class="dis-inline-block"><label>Status: </label></div>
        <div class="dis-inline-block">@Html.DisplayFor(x => x.status, new { @readonly = "true", @class = "input" })</div>
        <div class="dis-inline-block m-l-10"><label>Approver:</label></div>
        <div class="dis-inline-block">@Html.DisplayFor(model => model.approver, new { @readonly = "true", @class = "input" })</div>
        <div class="dis-inline-block m-l-10"><label>Verifier:</label></div>
        <div class="dis-inline-block">
            @Html.DisplayFor(model => model.verifier_1, new { @readonly = "true", @class = " input" })
            @Html.DisplayFor(model => model.verifier_2, new { @readonly = "true", @class = " input" })
        </div>
    </div>
    <div id="entry-controls" class="m-b-10">
        @{
            var enableSave = false;
            var enableDelete = (Model.statusID == GlobalSystemValues.STATUS_PENDING ||
                                  Model.statusID == GlobalSystemValues.STATUS_REJECTED) && (isMaker) ? true : false;
            var enableModify = (Model.statusID == GlobalSystemValues.STATUS_PENDING ||
                                  Model.statusID == GlobalSystemValues.STATUS_REJECTED) && (isMaker) ? true : false;
            //enable verify when status is Pending
            var enableVerify = ((Model.statusID == GlobalSystemValues.STATUS_PENDING
                                 //OR if Status is Verified and Verifiers  < 2 and not one of the current verifiers of the transaction
                                 || (Model.statusID == GlobalSystemValues.STATUS_VERIFIED && (!isVerifier) && Verifiable))
                                 //AND Role  is Verifier OR Approver AND not the Maker of the  transaction
                                 && ((aVerifier) || (anApprover))) && (!isMaker) ? true : false;

            var enableApprove = ((Model.statusID == GlobalSystemValues.STATUS_PENDING
                                  || Model.statusID == GlobalSystemValues.STATUS_VERIFIED)) &&
                                  (anApprover) && (!isMaker) && (!isVerifier) ? true : false;

            var enableReject = ((Model.statusID == GlobalSystemValues.STATUS_PENDING
                                        || Model.statusID == GlobalSystemValues.STATUS_VERIFIED) && ((anApprover) || (aVerifier))) && (!isMaker) && (!isVerifier) ? true : false;

            var enableBIR = (Model.statusID == GlobalSystemValues.STATUS_REVERSED ||
                                Model.statusID == GlobalSystemValues.STATUS_FOR_PRINTING ||
                                Model.statusID == GlobalSystemValues.STATUS_FOR_CLOSING ||
                                Model.statusID == GlobalSystemValues.STATUS_POSTED) ? true : false;

            var enableReversal = (Model.statusID == GlobalSystemValues.STATUS_FOR_PRINTING ||
                                Model.statusID == GlobalSystemValues.STATUS_FOR_CLOSING ||
                                Model.statusID == GlobalSystemValues.STATUS_POSTED) ? true : false;
        }
        @using (Html.BeginForm("VerAppModCV", "Home", FormMethod.Post, new { @class = "validate-form" }))
        {
            @Html.HiddenFor(x => Model.entryID)
            @if (isMaker || isVerifier || isApprover || aVerifier || anApprover)
            {
                <div class="flex-sb">
                    <div>
                        <div class="dis-inline-block">@if(enableSave) { <button class="tbl-btn">Save</button> }</div>
                        <div class="dis-inline-block">@if(enableDelete) { <button class="tbl-btn btnEntryAction" value="Delete" name="command">Delete</button> }</div>
                        <div class="dis-inline-block">@if(enableModify) { <button class="tbl-btn btnEntryAction" value="Modify" name="command">Modify</button> }</div>
                        <div class="dis-inline-block">@if(enableVerify) { <button class="tbl-btn btnEntryAction" value="verifier" name="command">Verify</button> }</div>
                        <div class="dis-inline-block">@if(enableApprove) { <button class="tbl-btn btnEntryAction" value="approver" name="command">Approve</button> }</div>
                        <div class="dis-inline-block">@if(enableReject) { <button class="tbl-btn btnEntryAction" value="Reject" name="command">Reject</button> }</div>
                    </div>
                    <div>
                        <div class="dis-inline-block">@if(enableBIR) { <button class="tbl-btn" id="printBir" value="printBir">Print BIR Certificate</button> }</div>
                        <div class="dis-inline-block">@if(enableBIR) { <button class="tbl-btn" id="printVoucher" value="printVoucher">Print Check Voucher</button> }</div>
                        <div class="dis-inline-block">@if(enableBIR) { <button class="tbl-btn" id="printCheck" value="printCheck">Print Check</button> }</div>
                        <div class="dis-inline-block">@if(enableReversal) { <button class="tbl-btn btnEntryAction" id="reversal_entry" value="Reversal" name="command">Create Reversal Entry</button> }</div>
                    </div>
                </div>
            }
            <input type="hidden" name="command" id="btnID" />
        }
    </div>
    <div id="modalDiv">
        @Html.Partial("ModalPartial")
    </div>
</div>

<script type="text/javascript" src="~/js/EntryScripts.js"></script>
<script type="text/javascript">
    $(window).on("load", function () {
        $('#iframePreview').prop('src', "/Home/VoucherViewCV?ExpenseID=@Model.entryID");
    });
    $(function () {
        if ($('#alert').text() != "") {
            $('#divAlertWindow').show();
        }

        @if (int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.maker
          || int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.verifier_1_id
          || int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.verifier_2_id
          || int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.approver_id)
        {
            <Text>
            $("#entry-controls").on("click", "#printBir", function (e) {
                var vendorID = @Model.vendor;
                var approverID = @Model.approver_id;
                var link = [
                @foreach (var item in Model.birForms)
                {
                    <Text>
                         "/Home/Generate2307File?_vendor=@item.vendor&_ewt=@item.ewt&_tax=@item.vat&_amount=@item.amount&approver=@item.approver&expID=@Model.entryID",
                    </Text>
                }
                    ""
                ];

                for (var i = 0; i < link.length-1;i++) {
                    window.open(link[i]);
                }

                return false;
            });
            </Text>
        }

        $("#entry-controls").on("click", "#printCheck", function (e) {
            window.open("/Home/GenerateCheckFile?ExpenseID=@Model.entryID");
            return false;
        });


    });
</script>
<script type="text/javascript">
    $(document).ready(function () {
        if ($('#alert').text() != "") {
            $('#divAlertWindow').show();
        }
    });
</script>