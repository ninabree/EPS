@using ExpenseProcessingSystem.ViewModels
@model EntryCVViewModelList
@inject IJsonHelper Json;

@{
    ViewData["Title"] = "Entry_SS";
}

<div class="tabContent">
    <input id="_screen" type="hidden" value="cv" />
    @using (Html.BeginForm("AddNewSS", "Home", FormMethod.Post, new { @class = "validate-form", @id = "inputForm" }))
    {
        <div id="tbl-lbl">
            <div class="dis-inline-block"><p>Date:</p></div>
            <div class="dis-inline-block">
                @Html.EditorFor(m => m.expenseDate, new { htmlAttributes = new { @class = "input w-97", @type = "date", @readonly = "readonly" } })
            </div>
            <div class="dis-inline-block" style="float:right;">
                <p class="dis-inline-block">
                    @Html.TextBoxFor(model => model.expenseYear, new { @readonly = "true", @class = "input" })
                </p>
                -
                <p class="dis-inline-block">
                    @Html.TextBoxFor(model => model.expenseId, new { @readonly = "true", @class = "input" })
                </p>
            </div>
        </div>
        <div>
            <table class="table table-bordered table-striped voucher-tbl w-97" id="inputTable">
                <colgroup>
                    <col style="width:15%;" />
                    <col style="width:13%;" />
                    <col style="width:13%;" />
                    <col style="width:10%" />
                    <col style="width:2%;" />
                    <col style="width:5%;" />
                    <col style="width:2%;" />
                    <col style="width:5%;" />
                    <col style="width:2%;" />
                    <col style="width:5%;" />
                    <col style="width:8%;" />
                    <col style="width:8%;" />
                    <col style="width:8%;" />
                    <col style="width:2%;" />
                    <col style="width:2%;" />
                </colgroup>
                <thead>
                    <tr>
                        <th rowspan="2">Gbase Remarks</th>
                        <th rowspan="2">Payee</th>
                        <th rowspan="2">Account</th>
                        <th rowspan="2">Department</th>
                        <th colspan="2" rowspan="2">VAT</th>
                        <th colspan="3" rowspan="2">EWT</th>
                        <th rowspan="2">Currency</th>
                        <th>Debit</th>
                        <th colspan="2">Credit</th>
                        <th rowspan="2"></th>
                    </tr>
                    <tr>
                        <th scope="col">Gross Amount</th>
                        <th scope="col">EWT Amount</th>
                        <th scope="col">Cash</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.EntryCV.Count; i++)
                    {
                        <tr id="item_@i">
                            <td class="p-b-1 p-t-1">
                                <div class="flex-sb">
                                    @Html.TextBoxFor(x => Model.EntryCV[i].GBaseRemarks, new { @class = "input100 w-80 txtGBaseRemark voucher-input", @maxlength = "29" })
                                    <div id="remark_@i">
                                        <a href="#" class="gRemarks glyphicon glyphicon-folder-open fs-23 m-r-5"></a>
                                        @for (int y = 0; y < Model.EntryCV[i].gBaseRemarksDetails.Count(); y++)
                                        {
                                            @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].docType);
                                            @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].desc);
                                            @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].invNo);
                                            @Html.HiddenFor(x => Model.EntryCV[i].gBaseRemarksDetails[y].amount);
                                        }
                                    </div>
                                </div>
                            </td>
                            <td>
                                @Html.DropDownListFor(m => Model.EntryCV[i].dtlSSPayee, new SelectList(Model.systemValues.employees, "Value", "Text", Model.systemValues.employees.SelectedValue), new { @class = "input100 txtPayee voucher-input" })
                            </td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryCV[i].account, new SelectList(Model.systemValues.acc, "accId", "accName"), new { @class = "input100 txtAcc voucher-input" })
                            </td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryCV[i].dept, new SelectList(Model.systemValues.dept, "Value", "Text", Model.systemValues.dept.SelectedValue), new { @class = "input100 voucher-input" })
                            </td>
                            <td style="text-align:center">
                                @Html.CheckBoxFor(x => Model.EntryCV[i].chkVat, new { @class = "chkVat comVar" })
                            </td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryCV[i].vat, new SelectList(Model.EntryCV[i].vendVATList, "VAT_ID", "VAT_Rate", Model.EntryCV[i].vat), new { @class = "input100 txtVat comVar voucher-input", @disabled = "true" })
                            </td>
                            <td style="text-align:center">
                                @Html.CheckBoxFor(x => Model.EntryCV[i].chkEwt, new { @class = "chkEwt comVar" })
                            </td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryCV[i].ewt, new SelectList(Model.EntryCV[i].vendTRList, "TR_ID", "TR_Tax_Rate", Model.EntryCV[i].ewt), new { @class = "input100 txtEwt comVar voucher-input", @disabled = "true" })
                            </td>
                            <td style="text-align:center">
                                <a class="reqEWTBtn glyphicon glyphicon-list-alt expenseEWT" href="#" style="pointer-events:none;"></a>
                                @Html.HiddenFor(x => Model.EntryCV[i].dtl_Ewt_Payor_Name_ID, new { @class = "txtPayor" })
                            </td>
                            <td>
                                @Html.DropDownListFor(x => Model.EntryCV[i].ccy, new SelectList(Model.systemValues.currency, "Value", "Text", Model.systemValues.currency.SelectedValue), new { @class = "input100 txtccy voucher-input" })
                            </td>
                            <td>
                                @Html.TextBoxFor(x => Model.EntryCV[i].debitGross, new { @class = "input100 txtGross", @type = "number", @min = "0", @readonly = "readonly" })
                                <input type="hidden" id="hidDebit" class="hidDebit" />
                            </td>
                            <td>
                                @Html.TextBoxFor(x => Model.EntryCV[i].credEwt, new { @class = "input100 txtCredEwt", @type = "number", @min = "0", @readonly = "readonly" })
                            </td>
                            <td>
                                @Html.TextBoxFor(x => Model.EntryCV[i].credCash, new { @class = "input100 txtCredCash", @type = "number", @min = "0", @readonly = "readonly" })
                            </td>
                            <td id="req_@i">
                                <a class="cashBreakdown reqBtn glyphicon glyphicon-list-alt" href="#" data-title="Cash Breakdown"></a>
                                @Html.HiddenFor(x => Model.EntryCV[i].modalInputFlag, new { @class = "hiddenItem" })
                                @Html.HiddenFor(x => Model.EntryCV[i].screenCode, new { @class = "hiddenScreencode" })
                                @Html.HiddenFor(x => Model.EntryCV[i].ccyAbbrev, new { @class = "hiddenCcyAbbrev" })
                                <div id="divCashBD_@i">
                                    @for (int y = 0; y < Model.EntryCV[i].cashBreakdown.Count(); y++)
                                    {
                                        @Html.HiddenFor(x => Model.EntryCV[i].cashBreakdown[y].cashDenomination)
                                        @Html.HiddenFor(x => Model.EntryCV[i].cashBreakdown[y].cashNoPC)
                                        @Html.HiddenFor(x => Model.EntryCV[i].cashBreakdown[y].cashAmount)
                                    }
                                </div>
                            </td>
                        </tr>
                    }

                    <tr>
                        <td style="border:none; background-color:#f2f2f2" rowspan="2">
                            <a id="addRow" href="#" class="glyphicon glyphicon-plus"></a>
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            <a id="removeRow" href="#" class="glyphicon glyphicon-remove expenseTable-remove" style="display:none"></a>
                        </td>
                        <td colspan="9" style="text-align:right; border:none; background-color:#f2f2f2">Subtotal : </td>
                        <td rowspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="grossTotal" value="0" /></div></td>
                        <td><input type="text" readonly class="input100" id="credEwtTotal" value="0" /></td>
                        <td><input type="text" readonly class="input100" id="credCashTotal" value="0" /></td>
                    </tr>
                    <tr>
                        <td colspan="9" style="text-align:right; border:none; background-color:#f2f2f2 ">Total:</td>
                        <td colspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="credTotal" value="0" /></div></td>
                    </tr>

                </tbody>
            </table>
        </div>
        <div id="entry-controls" class="m-b-10">
            <div class="flex-sb m-t-15">
                <div>
                    <div class="dis-inline-block"><button class="tbl-btn btnEntryAction" name="command" value="Save">Save</button></div>
                </div>
            </div>
        </div>
        @Html.HiddenFor(x => Model.entryID)
        @Html.HiddenFor(x => Model.createdDate)
        @Html.HiddenFor(x => x.payee_type)
        <input type="hidden" name="command" id="btnID" />
    }
    <input type="hidden" id="phpID" value="@Model.phpCurrID" />
    <input type="hidden" id="phpAbbrv" value="@Model.phpAbbrev" />
    <input type="hidden" id="phpMasterID" value="@Model.phpCurrMasterID" />
    <input type="hidden" id="yenID" value="@Model.yenCurrID"/>
    <input type="hidden" id="yenAbbrv" value="@Model.yenAbbrev" />
    <input type="hidden" id="yenMasterID" value="@Model.yenCurrMasterID" />
    <div id="modalDiv">
        @Html.Partial("ModalGBase")
    </div>
    @Html.Partial("ModalPartial2")
</div>
@*validation message*@
<div id="ValidationSummary" style="display:none" class="">
    @Html.ValidationSummary(false, "", new { @id = "validationSummary" })
</div>
<script type="text/javascript" src="~/js/EntryScripts.js"></script>
<script>
    $(document).ready(function () {
        //Enable Cash breakdown button if currency = PHP, disable if not.
        var trs = $("#inputTable").find("tbody").find("tr");
        for (var cnt = 0; cnt < trs.length - 2; cnt++) {
            reqBtnDisable(cnt);
            ddlEnabled(cnt);
        }

        $(function () {
            $(window).on("load", function () {
                var gross = $(".txtGross");
                var credEwt = $(".txtCredEwt");
                var credCash = $(".txtCredCash");

                var grossTotal = 0;
                var ewtSubTotal = 0;
                var cashSubTotal = 0;

                for (var i = 0; i < gross.length; i++) {
                    grossTotal += Number(gross[i].value);
                }

                for (var i = 0; i < credEwt.length; i++) {
                    ewtSubTotal += Number(credEwt[i].value);
                }

                for (var i = 0; i < credCash.length; i++) {
                    cashSubTotal += Number(credCash[i].value);
                }

                $("#grossTotal").val(grossTotal);
                $("#credEwtTotal").val(ewtSubTotal);
                $("#credCashTotal").val(cashSubTotal);
                $("#credTotal").val(Number(ewtSubTotal + cashSubTotal));
            });

            $("#addRow").click(function (e) {
                var itemCount = document.getElementById('inputTable').getElementsByTagName('tbody')[0].childElementCount - 2;
                var tableRef = document.getElementById('inputTable').getElementsByTagName('tbody')[0];

                var acc = @Html.Raw(Json.Serialize(Model.systemValues.acc));
                var dept = @Html.Raw(Json.Serialize(Model.systemValues.dept));
                var curr = @Html.Raw(Json.Serialize(Model.systemValues.currency));
                var ewt = @Html.Raw(Json.Serialize(Model.systemValues.ewt));
                var vat = @Html.Raw(Json.Serialize(Model.systemValues.vat));
                var payee = @Html.Raw(Json.Serialize(Model.systemValues.employees));

                // Insert a row in the table at the last row
                var newRow = tableRef.insertRow(itemCount);
                newRow.id = "item_" + itemCount

                var htmlContent = '<td class="p-b-1 p-t-1"><div class="flex-sb">' +
                    '<input class="input100 w-80 txtGBaseRemark voucher-input" id="EntryCV_' + itemCount + '__GBaseRemarks" name="EntryCV[' + itemCount + '].GBaseRemarks" maxlength="29" type="text" value="">' +
                    '<div id="remark_' + itemCount + '"><a href="#" class="gRemarks glyphicon glyphicon-folder-open fs-23 m-r-5"></a></div></div></td>' +
                    '<td><select class="input100 txtPayee voucher-input" id="EntryCV_' + itemCount + '__dtlSSPayee" name="EntryCV[' + itemCount + '].dtlSSPayee">';

                for (var i = 0; i < payee.length; i++) {
                    htmlContent += '<option value="' + payee[i]["value"] + '">' + payee[i]["text"] + '</option>';
                }

                htmlContent += '</select></td>' +
                    '<td><select class="input100 txtAcc voucher-input" id="EntryCV_' + itemCount + '__account" name="EntryCV[' + itemCount + '].account">';

                for (var i = 0; i < acc.length; i++) {
                    htmlContent += '<option value="' + acc[i]["accId"] + '" class="' + acc[i]["accCode"] + '">' + acc[i]["accName"] + '</option>';
                }

                htmlContent += '</select></td>' +
                    '<td><select class="input100 voucher-input" id="EntryCV_' + itemCount + '__dept" name="EntryCV[' + itemCount + '].dept">';
                for (var i = 0; i < dept.length; i++) {
                    htmlContent += '<option value="' + dept[i]["value"] + '">' + dept[i]["text"] + '</option>';
                }

                htmlContent += '</select></td>' +
                    '<td style="text-align:center"><input class="chkVat comVar voucher-input" data-val="true" data-val-required="The chkVat field is required." id="EntryCV_' + itemCount + '__chkVat" name="EntryCV[' + itemCount + '].chkVat" type="checkbox" value="true"></td>' +
                    '<td><select class="input100 txtVat comVar voucher-input" data-val="true" data-val-required="The vat field is required." id="EntryCV_' + itemCount + '__vat" name="EntryCV[' + itemCount + '].vat" disabled="disabled">';
                for (var i = 0; i < vat.length; i++) {
                    htmlContent += '<option value="' + vat[i]["value"] + '">' + vat[i]["text"] + '</option>';
                }
                htmlContent += '</select></td>' +
                    '<td style="text-align:center"><input class="chkEwt comVar voucher-input" data-val="true" data-val-required="The chkEwt field is required." id="EntryCV_' + itemCount + '__chkEwt" name="EntryCV[' + itemCount + '].chkEwt" type="checkbox" value="true"></td>' +
                    '<td><select class="input100 txtEwt comVar voucher-input" data-val="true" data-val-required="The ewt field is required." id="EntryCV_' + itemCount + '__ewt" name="EntryCV[' + itemCount + '].ewt" disabled="disabled">';
                for (var i = 0; i < ewt.length; i++) {
                    htmlContent += '<option value="' + ewt[i]["value"] + '">' + ewt[i]["text"] + '</option>';
                }
                htmlContent += '</select></td>' +
                    '<td style="text-align:center"><a class="reqEWTBtn glyphicon glyphicon-list-alt expenseEWT" href="#" data-title="Vendor selection" style="pointer-events:none;"></a><input data-val="true" data-val-required="The dtl_Ewt_Payor_Name_ID field is required." id="EntryCV_' + itemCount + '__dtl_Ewt_Payor_Name_ID" name="EntryCV[' + itemCount + '].dtl_Ewt_Payor_Name_ID" class = "txtPayor" type="hidden" value="0"></td>' +
                    '<td><select class="input100 txtccy voucher-input" data-val="true" data-val-required="The ccy field is required." id="EntryCV_' + itemCount + '__ccy" name="EntryCV[' + itemCount + '].ccy">';
                for (var i = 0; i < curr.length; i++) {
                    htmlContent += '<option value="' + curr[i]["value"] + '">' + curr[i]["text"] + '</option>';
                }
                htmlContent += '</select></td>' +
                    '<td><input class="input100 txtGross" data-val="true" data-val-number="The field debitGross must be a number." data-val-required="The debitGross field is required." id="EntryCV_' + itemCount + '__debitGross" name="EntryCV[' + itemCount + '].debitGross" type="number" readonly="true" min="0" value="0"></td>' +
                    '<td><input class="input100 txtCredEwt" data-val="true" data-val-number="The field credEwt must be a number." data-val-required="The credEwt field is required." id="EntryCV_' + itemCount + '__credEwt" name="EntryCV[' + itemCount + '].credEwt" type="number" readonly="true" min="0" value="0"></td>' +
                    '<td><input class="input100 txtCredCash" data-val="true" data-val-number="The field credCash must be a number." data-val-required="The credCash field is required." id="EntryCV_' + itemCount + '__credCash" name="EntryCV[' + itemCount + '].credCash" type="number" readonly="true" min="0" value="0"></td>' +
                    '<td id="req_' + itemCount + '"><a class="cashBreakdown reqBtn glyphicon glyphicon-list-alt" href="#" data-title="Cash Breakdown"></a><input class="hiddenItem" data-val="true" data-val-required="The modalInputFlag field is required." id="EntryCV_' + itemCount + '__modalInputFlag" name="EntryCV[' + itemCount + '].modalInputFlag" type="hidden" value="0"><input id="EntryCV_' + itemCount + '__screenCode" name="EntryCV[' + itemCount + '].screenCode" type="hidden" value="SS"><input class="hiddenCcyAbbrev" id="EntryCV_' + itemCount + '__ccyAbbrev" name="EntryCV[' + itemCount + '].ccyAbbrev" type="hidden" value=""><div id="divCashBD_' + itemCount + '"></div></td>';

                newRow.innerHTML = htmlContent;
                $('#EntryCV_' + itemCount + '__ccy').val($('#phpID').val());
                reqBtnDisable(itemCount);

                var trCount = $("#inputTable").find("tbody").find("tr");
                if ((trCount.length - 3) > 0) {
                    $('.expenseTable-remove').show();
                }
            });

            //Cash Breakdown Modal
            $("table").on("click", ".cashBreakdown", function (e) {
                e.stopImmediatePropagation();

                var pNode = $(this.parentNode)[0].parentNode;
                var id = pNode.id;
                var modalDivBody = $('.modal-body');
                var modalDivFooter = $('.modal-footer').find("#add_row_btn").remove();;

                $('.modal-header').find('.modal-title').remove();
                $('.modal-header').append('<h4 class="modal-title">Cash Breakdown</h4>');

                modalDivBody.load("@Url.Action("EntryExpenseCashBreakdown", "Modal")", {
                    "id": id,
                    "vendor": $("#" + pNode.id).find(".txtPayee option:selected").text(),
                    "account": $("#" + pNode.id).find(".txtAcc option:selected").text(),
                    "amount": $("#" + pNode.id).find(".txtCredCash").val(),
                    "screencode": $("#" + pNode.id).find(".hiddenScreencode").val()
                }, function (response, status, xhr) {
                    if (status == "error") {
                        alert("Something went wrong.");
                    } else {
                        if ($("#parentIdCashBreakdown") != null) {
                            var tableRef = document.getElementById('modalTable').getElementsByTagName('tbody')[0];
                            //var tableRef = $("#modalTable").children("tbody");
                            var grossAmount = Number($("#" + id).find(".txtGross").val());
                        }
                    }
                });

                $('#myModal').modal('show');
            });

            //Enable Cash breakdown button and Vendor selection button if currency = PHP, disable if not.
            $("table").on("change", ".txtccy", function (e) {
                var pos = $(this.parentNode)[0].parentNode.id;
                var idx = pos.replace('item_', '');
                reqBtnDisable(idx);
                if ($('#EntryCV_' + idx + '__ccy option:selected').text() != $('#phpAbbrv').val()) {
                    $('#' + pos).find('.chkEwt').attr("disabled", "disabled");
                    $('#' + pos).find('.txtEwt').attr("disabled", "disabled");
                    $('#' + pos).find('.chkVat').attr("disabled", "disabled");
                    $('#' + pos).find('.txtVat').attr("disabled", "disabled");
                    $('#' + pos).find('.reqEWTBtn').css("pointer-events", "none");
                    $('#' + pos).find('.chkEwt').prop("checked", false);
                    $('#' + pos).find('.chkVat').prop("checked", false);
                } else {
                    $('#' + pos).find('.chkEwt').removeAttr("disabled");
                    $('#' + pos).find('.chkVat').removeAttr("disabled");
                    if ($('#' + pos).find('.chkEwt').is(':checked')) {
                        $('#' + pos).find('.txtEwt').removeAttr("disabled");
                        $('#' + pos).find('.reqEWTBtn').css("pointer-events", "auto");
                    }
                    if ($('#' + pos).find('.chkVat').is(':checked')) {
                        $('#' + pos).find('.txtVat').removeAttr("disabled");
                        $('#' + pos).find('.reqEWTBtn').css("pointer-events", "auto");
                    }
                }
                computeValuesSSByParentID(pos);
            });

            $("table").on("click", ".expenseEWT", function (e) {
                e.stopImmediatePropagation();
                var myModal2 = $('.myModal2');
                var modalDiv2 = $(myModal2).find('div div');
                var modalDivHeader2 = $(modalDiv2).find('.modal-header2');
                var modalDivBody2 = $(modalDiv2).find('.modal-body2');
                var modalDivFooter2 = $(modalDiv2).find('.modal-footer2');

                var pNode = $(this.parentNode)[0].parentNode;
                var taxpayor = $("#" + pNode.id).find(".txtPayor").val()

                //remove prev contents
                modalDivBody2.empty();
                modalDivHeader2.find('h4').remove();
                modalDivFooter2.find("#add_row_btn").remove();

                //set modal header title
                modalDivHeader2.append('<h4 class="modal-title">EWT Information</h4>');
                modalDivBody2.load("@Url.Action("EntryExpenseEWT", "Modal")", {
                    "id": pNode.id,
                    "taxpayor": taxpayor
                }, function (response, status, xhr) {
                    if (status == "error") {
                        alert("Something went wrong.");
                    }
                });

                $(myModal2).modal('show');
            });
        });
    });
</script>
<script type="text/javascript">
    function tblBuilder(tableRef, begMonth, day, duration, grossAmount) {
        var dvdAmount = roundNumber((grossAmount / duration), 2);

        var now = new Date();
        var Year = now.getFullYear();

        for (var i = 0; i < duration; i++) {
            var newRow = tableRef.insertRow(i);
            var cellDate = newRow.insertCell(0);
            var cellAmount = newRow.insertCell(1);

            var month = Number(begMonth) + Number(i);

            cellDate.innerHTML = new Date(Year, month, day).toDateString();
            cellAmount.innerHTML = dvdAmount;
        }
    };

    function roundNumber(num, scale) {
        if (!("" + num).includes("e")) {
            return +(Math.round(num + "e+" + scale) + "e-" + scale);
        } else {
            var arr = ("" + num).split("e");
            var sig = ""
            if (+arr[1] + scale > 0) {
                sig = "+";
            }
            return +(Math.round(+arr[0] + "e" + sig + (+arr[1] + scale)) + "e-" + scale);
        }
    };
    function round(value, exp) {
        if (typeof exp === 'undefined' || +exp === 0)
            return Math.round(value);

        value = +value;
        exp = +exp;

        if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0))
            return NaN;

        // Shift
        value = value.toString().split('e');
        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));

        // Shift back
        value = value.toString().split('e');
        return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));
    };

    function reqBtnDisable(idx) {
        if ($('#EntryCV_' + idx + '__ccy option:selected').text() != $('#phpAbbrv').val()) {
            $('#req_' + idx).find('.reqBtn').css("pointer-events", "none");
            $('#req_' + idx).find('.hiddenCcyAbbrev').val("");
            $('#item_' + idx).find('.chkEwt').attr('disabled', 'disabled');
            $('#item_' + idx).find('.chkVat').attr('disabled', 'disabled');
        } else {
            $('#req_' + idx).find('.reqBtn').css("pointer-events", "auto");
            $('#req_' + idx).find('.hiddenCcyAbbrev').val($('#phpAbbrv').val());
            $('#item_' + idx).find('.chkEwt').removeAttr('disabled');
            $('#item_' + idx).find('.chkVat').removeAttr('disabled');
        }
    };

    function ddlEnabled(idx) {
        var pid = '#item_' + idx;

        if (!$(pid).find(".chkEwt").is(':checked')) {
            if ($(pid).find(".chkVat").is(':checked')) {
                $(pid).find('.reqEWTBtn').css("pointer-events", "auto");
            } else {
                $(pid).find('.reqEWTBtn').css("pointer-events", "none");
            }
        } else {
            $(pid).find('.reqEWTBtn').css("pointer-events", "auto");
            $(pid).find('.txtEwt').removeAttr('disabled');
        }

        if (!$(pid).find(".chkVat").is(':checked')) {
            if ($(pid).find(".chkEwt").is(':checked')) {
                $(pid).find('.reqEWTBtn').css("pointer-events", "auto");
            } else {
                $(pid).find('.reqEWTBtn').css("pointer-events", "none");
            }
        } else {
            $(pid).find('.reqEWTBtn').css("pointer-events", "auto");
            $(pid).find('.txtVat').removeAttr('disabled');
        }
    };

    function computeValuesSSByParentID(parentID) {
        //var isInter = $("#" + parentID).find("#EntryDDV_" + parentID.substring(5) + "__inter_entity").is(':checked');
        var amounts = $("");
        var grossAmt = 0;
        var origGrossAmt = 0;
        var origCredAmt = $("#" + parentID).find(".txtCredCash").val();

        ////check if Inter Entity
        //if (isInter) {
        //    var grossAmt = $("#" + parentID + " td .txtGross").val();
        //} else {
        amounts = $("#" + parentID + " .amount");
        grossAmt = 0;
        origGrossAmt = $("#" + parentID + " .txtGross").val();
        for (var i = 0; i < amounts.length; i++) {
            grossAmt += Number(amounts[i].value);
        }

        //}

        $("#" + parentID + " td .txtGross").val(roundNumber(grossAmt, 2));
        //$("#" + pNode.id + " .txtGross").attr("value", grossAmt);

        var itemNo = parentID; //jquery obj
        var chkEwtVal = $("#" + itemNo).find(".chkEwt").is(':checked');
        var vatable = $("#" + itemNo).find(".chkVat").is(':checked');
        if (chkEwtVal) {
            if (vatable) {
                var vatRate = (Number($("#" + itemNo).find(".txtVat option:selected").text()) / 100);
                var ewtRate = (Number($("#" + itemNo).find(".txtEwt option:selected").text()) / 100);
                var netVat = roundNumber(grossAmt / (1 + vatRate), 2);
                var ewt = roundNumber(netVat * ewtRate, 2);
                var netEwt = grossAmt - ewt;

                $("#" + itemNo).find(".txtCredEwt").val(roundNumber(ewt, 2));
                $("#" + itemNo).find(".txtCredCash").val(roundNumber(netEwt, 2));
                if ($(".hiddenScreencode").val() == "SS") {
                    $("#" + itemNo).find(".txtCredEwt").val(0);
                    $("#" + itemNo).find(".txtGross").val(roundNumber(netEwt, 2));
                }
            } else {
                var ewtAmount = grossAmt * (Number($("#" + itemNo).find(".txtEwt option:selected").text()) / 100);
                $("#" + itemNo).find(".txtCredEwt").val(roundNumber(ewtAmount, 2));
                $("#" + itemNo).find(".txtCredCash").val(roundNumber((grossAmt - ewtAmount), 2));
                if ($(".hiddenScreencode").val() == "SS") {
                    $("#" + itemNo).find(".txtCredEwt").val(0);
                    $("#" + itemNo).find(".txtGross").val(roundNumber((grossAmt - ewtAmount), 2));
                }
            }
        } else {
            $("#" + itemNo).find(".txtCredEwt").val(0);
            $("#" + itemNo).find(".txtCredCash").val(roundNumber(grossAmt, 2));
            if ($(".hiddenScreencode").val() == "SS") {
                $("#" + itemNo).find(".txtGross").val(roundNumber(grossAmt, 2));
            }
        }

        //For PCS,SS - resetting of Cash breakdown list.
        if ($(".hiddenScreencode").val() == "PCV" || $(".hiddenScreencode").val() == "SS") {
            if (origCredAmt != $("#" + itemNo).find(".txtCredCash").val()) {
                var ret = parentID.replace('item_', '');
                $('#divCashBD_' + ret).empty();
                $('#EntryCV_' + ret + '__modalInputFlag').val(0);
            }
        }

        var gross = $(".txtGross");
        var credEwt = $(".txtCredEwt");
        var credCash = $(".txtCredCash");

        var grossTotal = 0;
        var ewtSubTotal = 0;
        var cashSubTotal = 0;

        for (var i = 0; i < gross.length; i++) {
            grossTotal += Number(gross[i].value);
        }

        for (var i = 0; i < credEwt.length; i++) {
            ewtSubTotal += Number(credEwt[i].value);
        }

        for (var i = 0; i < credCash.length; i++) {
            cashSubTotal += Number(credCash[i].value);
        }

        $("#grossTotal").val(grossTotal);
        $("#credEwtTotal").val(ewtSubTotal);
        $("#credCashTotal").val(cashSubTotal);
        $("#credTotal").val(Number(ewtSubTotal + cashSubTotal));
    };
</script>
