@{
    ViewData["Title"] = "Liquidation_SS";
}

@using ExpenseProcessingSystem.ViewModels
@using ExpenseProcessingSystem.ConstantData
@model LiquidationViewModel

@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

<input id="_screen" type="hidden" value="cv" />
@using (Html.BeginForm("", "Home", FormMethod.Post, new { @class = "validate-form" }))
{
    <div class="tabContent">

        <div id="tbl-lbl">
            <div class="dis-inline-block"><p>Date:</p></div>
            <div class="dis-inline-block">
                @(((DateTime)Model.expenseDate).ToString("MM/dd/yyyy"))
            </div>
            <div class="dis-inline-block" style="float:right">
                <p class="dis-inline-block">
                    @Html.TextBoxFor(model => model.expenseYear, new { @readonly = "true", @class = "input" })
                </p>
                -
                <p class="dis-inline-block">
                    @Html.TextBoxFor(model => model.expenseId, new { @readonly = "true", @class = "input" })
                </p>
            </div>
        </div>
        <div class="flex-c">
            <table class="table table-bordered table-striped voucher-tbl w-97" id="inputTable">
                <colgroup>
                    <col style="width:20%;" />
                    <col style="width:18%;" />
                    <col style="width:15%;" />
                    <col style="width:10%" />
                    <col style="width:2%;" />
                    <col style="width:6%;" />
                    <col style="width:2%;" />
                    <col style="width:6%;" />
                    <col style="width:5%;" />
                    <col style="width:8%;" />
                    <col style="width:8%;" />
                    <col style="width:8%;" />
                    <col style="width:2%;" />
                </colgroup>
                <thead>
                    <tr>
                        <th rowspan="2">Gbase Remarks</th>
                        <th rowspan="2">Payee</th>
                        <th rowspan="2">Account</th>
                        <th rowspan="2">Department</th>
                        <th colspan="2" rowspan="2">VAT</th>
                        <th colspan="2" rowspan="2">EWT</th>
                        <th rowspan="2">Currency</th>
                        <th>Debit</th>
                        <th colspan="2">Credit</th>
                    </tr>
                    <tr>
                        <th scope="col">Gross Amount</th>
                        <th scope="col">EWT Amount</th>
                        <th scope="col">Cash</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.LiquidationDetails.Count; i++)
                    {
                        <tr id="item_@i">
                            <td class="p-b-1 p-t-1">
                                <div class="flex-sb">
                                    @Html.DisplayFor( x=> Model.LiquidationDetails[i].GBaseRemarks)
                                    <div id="remark_@i">
                                        <a href="#" class="gRemarks glyphicon glyphicon-folder-open fs-23 m-r-5"></a>
                                        @for (int y = 0; y < Model.LiquidationDetails[i].gBaseRemarksDetails.Count(); y++)
                                        {
                                            @Html.HiddenFor(x => Model.LiquidationDetails[i].gBaseRemarksDetails[y].docType);
                                            @Html.HiddenFor(x => Model.LiquidationDetails[i].gBaseRemarksDetails[y].desc);
                                            @Html.HiddenFor(x => Model.LiquidationDetails[i].gBaseRemarksDetails[y].invNo);
                                            @Html.HiddenFor(x => Model.LiquidationDetails[i].gBaseRemarksDetails[y].amount);
                                        }
                                    </div>
                                </div>
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].dtlSSPayeeName)
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].accountName)
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].deptName)
                            </td>
                            <td style="text-align:center">
                                @Html.CheckBoxFor(x => Model.LiquidationDetails[i].chkVat, new { @class = "chkVat comVar", disabled = "disabled" })
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].vatValue)
                            </td>
                            <td style="text-align:center">
                                @Html.CheckBoxFor(x => Model.LiquidationDetails[i].chkEwt, new { @class = "chkEwt comVar", disabled = "disabled" })
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].ewtValue)
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].ccyAbbrev)
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].debitGross)
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].credEwt)
                            </td>
                            <td>
                                @Html.DisplayFor(m => Model.LiquidationDetails[i].credCash)
                            </td>
                            <td id="req_@i">
                                <a class="cashBreakdown reqBtn glyphicon glyphicon-list-alt" href="#"></a>
                                @Html.HiddenFor(x => Model.LiquidationDetails[i].modalInputFlag, new { @class = "hiddenItem" })
                                @Html.HiddenFor(x => Model.LiquidationDetails[i].screenCode, new { @class = "hiddenScreencode" })
                                <div id="divCashBD_@i">
                                    @for (int y = 0; y < Model.LiquidationDetails[i].cashBreakdown.Count(); y++)
                                    {
                                        @Html.HiddenFor(x => Model.LiquidationDetails[i].cashBreakdown[y].cashDenimination)
                                        @Html.HiddenFor(x => Model.LiquidationDetails[i].cashBreakdown[y].cashNoPC)
                                        @Html.HiddenFor(x => Model.LiquidationDetails[i].cashBreakdown[y].cashAmount)
                                    }
                                </div>
                            </td>
                        </tr>
                    }

                    <tr>
                        <td style="border:none; background-color:#f2f2f2" rowspan="2"><a id="addRow" href="#" class="glyphicon glyphicon-plus" style="display:none;"></a></td>
                        <td colspan="8" style="text-align:right; border:none; background-color:#f2f2f2">Subtotal : </td>
                        <td rowspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="grossTotal" /></div></td>
                        <td><input type="text" readonly class="input100" id="credEwtTotal" /></td>
                        <td><input type="text" readonly class="input100" id="credCashTotal" /></td>
                    </tr>
                    <tr>
                        <td colspan="8" style="text-align:right; border:none; background-color:#f2f2f2 ">Total:</td>
                        <td colspan="2"><div class="flex-c"><input type="text" class="input100" readonly id="credTotal" /></div></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div id="entry-status" class="m-t-10 m-b-10">
            <div class="dis-inline-block"><label>Status: </label></div>
            <div class="dis-inline-block">@Html.TextBoxFor(x => x.status, new { @disabled = "disabled", @class = "input" })</div>
            <div class="dis-inline-block"><label>Approver:</label></div>
            <div class="dis-inline-block">@Html.TextBoxFor(model => model.approver, new { @disabled = "disabled", @class = "input" })</div>
            <div class="dis-inline-block"><label>Verifier:</label></div>
            <div class="dis-inline-block">
                <p class="dis-inline-block">@Html.TextBoxFor(model => model.verifier_1, new { @disabled = "disabled", @class = "m-l-5 input" })</p>
                <p class="dis-inline-block">@Html.TextBoxFor(model => model.verifier_2, new { @disabled = "disabled", @class = "m-l-5 input" })</p>
            </div>
        </div>
        <div id="entry-controls" class="m-b-10">
            @Html.HiddenFor(x => Model.entryID)
            <div class="flex-sb">
                <div>
                    <div class="dis-inline-block tbl-btn"><button disabled>Save</button></div>

                    @if (int.Parse(HttpContextAccessor.HttpContext.Session.GetString("UserID")) == Model.maker)
                    {
                        <div class="dis-inline-block tbl-btn"><button value="Delete" name="command">Delete</button></div>
                        <div class="dis-inline-block tbl-btn"><button value="Modify" name="command">Modify</button></div>
                    }
                    else
                    {
                        <div class="dis-inline-block tbl-btn"><button disabled>Delete</button></div>
                        <div class="dis-inline-block tbl-btn"><button disabled>Modify</button></div>
                    }
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button id="reversal_entry" disabled>Create Reversal Entry</button></div>
                </div>
            </div>
            <div class="flex-sb">
                <div>
                    @if (HttpContextAccessor.HttpContext.Session.GetString("accessType") == GlobalSystemValues.ROLE_MAKER || HttpContextAccessor.HttpContext.Session.GetString("UserID") == Model.maker.ToString())
                    {
                        <div class="dis-inline-block tbl-btn"><button disabled>Approve/Verify</button></div>
                        <div class="dis-inline-block tbl-btn"><button disabled>Reject</button></div>
                    }
                    else if (HttpContextAccessor.HttpContext.Session.GetString("accessType") == GlobalSystemValues.ROLE_VERIFIER)
                    {
                        if (Model.statusID == GlobalSystemValues.STATUS_APPROVED || Model.statusID == GlobalSystemValues.STATUS_VERIFIED
                            || Model.statusID == GlobalSystemValues.STATUS_REJECTED)
                        {
                            <div class="dis-inline-block tbl-btn"><button disabled>Approve/Verify</button></div>
                            <div class="dis-inline-block tbl-btn"><button disabled>Reject</button></div>
                        }
                        else
                        {
                            <div class="dis-inline-block tbl-btn"><button value="@HttpContextAccessor.HttpContext.Session.GetString("accessType")" name="command">Approve/Verify</button></div>
                            <div class="dis-inline-block tbl-btn"><button value="Reject" name="command">Reject</button></div>
                        }
                    }
                    else
                    {
                        if (Model.statusID == GlobalSystemValues.STATUS_APPROVED || Model.statusID == GlobalSystemValues.STATUS_REJECTED)
                        {
                            <div class="dis-inline-block tbl-btn"><button disabled>Approve/Verify</button></div>
                            <div class="dis-inline-block tbl-btn"><button disabled>Reject</button></div>
                        }
                        else
                        {
                            <div class="dis-inline-block tbl-btn"><button value="@HttpContextAccessor.HttpContext.Session.GetString("accessType")" name="command">Approve/Verify</button></div>
                            <div class="dis-inline-block tbl-btn"><button value="Reject" name="command">Reject</button></div>
                        }
                    }
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button disabled>Delete GBase Post</button></div>
                </div>
                <div>
                    <div class="dis-inline-block tbl-btn"><button disabled>Print BIR Certificate</button></div>
                </div>
            </div>
        </div>
        <div id="modalDiv">
            @Html.Partial("ModalGBase")
        </div>
    </div>
}
@*validation message*@
<div id="ValidationSummary" style="display:none" class="">
    @Html.ValidationSummary(false, "", new { @id = "validationSummary" })
</div>
<script>

    $(document).ready(function () {
        //Enable Cash breakdown button if currency = PHP, disable if not.
        var trs = $("#inputTable").find("tbody").find("tr");
        for (var cnt = 0; cnt < trs.length - 2; cnt++) {
            reqBtnDisable(cnt);
        }

        $(function () {
            $(window).on("load", function () {
                var gross = $(".txtGross");
                var credEwt = $(".txtCredEwt");
                var credCash = $(".txtCredCash");

                var grossTotal = 0;
                var ewtSubTotal = 0;
                var cashSubTotal = 0;

                for (var i = 0; i < gross.length; i++) {
                    grossTotal += Number(gross[i].value);
                }

                for (var i = 0; i < credEwt.length; i++) {
                    ewtSubTotal += Number(credEwt[i].value);
                }

                for (var i = 0; i < credCash.length; i++) {
                    cashSubTotal += Number(credCash[i].value);
                }

                $("#grossTotal").val(grossTotal);
                $("#credEwtTotal").val(ewtSubTotal);
                $("#credCashTotal").val(cashSubTotal);
                $("#credTotal").val(Number(ewtSubTotal + cashSubTotal));
            });

            //Cash Breakdown Modal
            $("table").on("click", ".cashBreakdown", function (e) {
                e.stopImmediatePropagation();

                var pNode = $(this.parentNode)[0].parentNode;
                var id = pNode.id;
                var modalDivBody = $('.modal-body');
                var modalDivFooter = $('.modal-footer').find("#add_row_btn").remove();;

                if ($('.modal-header').find(".modal-title")[0] == null) {
                    $('.modal-header').append('<h4 class="modal-title">Cash Breakdown</h4>');
                }

                modalDivBody.load("@Url.Action("EntryExpenseCashBreakdown", "Modal")", {
                    "id": id,
                    "vendor": $("#" + pNode.id).find(".txtPayee option:selected").text(),
                    "account": $("#" + pNode.id).find(".txtAcc option:selected").text(),
                    "amount": $("#" + pNode.id).find(".txtGross").val(),
                    "screencode": $("#" + pNode.id).find(".hiddenScreencode").val()
                }, function (response, status, xhr) {
                    if (status == "error") {
                        alert("Something went wrong.");
                    } else {
                        if ($("#parentIdCashBreakdown") != null) {
                            var tableRef = document.getElementById('modalTable').getElementsByTagName('tbody')[0];
                            var grossAmount = Number($("#" + id).find(".txtGross").val());
                        }
                    }
                });

                $('#myModal').modal('show');
            });
        });
    });
</script>
<script type="text/javascript">
    function round(value, exp) {
        if (typeof exp === 'undefined' || +exp === 0)
            return Math.round(value);

        value = +value;
        exp = +exp;

        if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0))
            return NaN;

        // Shift
        value = value.toString().split('e');
        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));

        // Shift back
        value = value.toString().split('e');
        return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));
    };

    function reqBtnDisable(idx) {
        if ($('#EntryCV_' + idx + '__ccy').find(':selected').text() != "PHP") {
            $('#req_' + idx).find('.reqBtn').css("pointer-events", "none");
        } else {
            $('#req_' + idx).find('.reqBtn').css("pointer-events", "auto");
        }
    };

</script>
<script type="text/javascript" src="~/js/EntryScripts.js"></script>
